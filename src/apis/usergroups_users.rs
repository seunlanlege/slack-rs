/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `users_list`
#[derive(Clone, Debug)]
pub struct UsersListParams {
    /// Authentication token. Requires scope: `usergroups:read`
    pub token: String,
    /// The encoded ID of the User Group to update.
    pub usergroup: String,
    /// Allow results that involve disabled User Groups.
    pub include_disabled: Option<bool>
}

/// struct for passing parameters to the method `users_update`
#[derive(Clone, Debug)]
pub struct UsersUpdateParams {
    /// A comma separated string of encoded user IDs that represent the entire list of users for the User Group.
    pub users: String,
    /// Authentication token. Requires scope: `usergroups:write`
    pub token: String,
    /// The encoded ID of the User Group to update.
    pub usergroup: String,
    /// Include the number of users in the User Group.
    pub include_count: Option<bool>
}


/// struct for typed errors of method `users_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersListError {
    DefaultResponse(crate::models::UsergroupsUsersListErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersUpdateError {
    DefaultResponse(crate::models::UsergroupsUsersUpdateErrorSchema),
    UnknownValue(serde_json::Value),
}


/// List all users in a User Group
pub async fn users_list(configuration: &configuration::Configuration, params: UsersListParams) -> Result<crate::models::UsergroupsUsersListSchema, Error<UsersListError>> {
    // unbox the parameters
    let token = params.token;
    let usergroup = params.usergroup;
    let include_disabled = params.include_disabled;


    let client = &configuration.client;

    let uri_str = format!("{}/usergroups.users.list", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    req_builder = req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref s) = include_disabled {
        req_builder = req_builder.query(&[("include_disabled", &s.to_string())]);
    }
    req_builder = req_builder.query(&[("usergroup", &usergroup.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::UsergroupsUsersListSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<UsersListError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Update the list of users for a User Group
pub async fn users_update(configuration: &configuration::Configuration, params: UsersUpdateParams) -> Result<crate::models::UsergroupsUsersUpdateSchema, Error<UsersUpdateError>> {
    // unbox the parameters
    let users = params.users;
    let token = params.token;
    let usergroup = params.usergroup;
    let include_count = params.include_count;


    let client = &configuration.client;

    let uri_str = format!("{}/usergroups.users.update", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("users", users.to_string());
    form_params.insert("token", token.to_string());
    if let Some(param_value) = include_count {
        form_params.insert("include_count", param_value.to_string());
    }
    form_params.insert("usergroup", usergroup.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::UsergroupsUsersUpdateSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<UsersUpdateError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

