/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `apps_approve`
#[derive(Clone, Debug)]
pub struct AppsApproveParams {
    /// Authentication token. Requires scope: `admin.apps:write`
    pub token: String,
    pub team_id: Option<String>,
    /// The id of the app to approve.
    pub app_id: Option<String>,
    /// The id of the request to approve.
    pub request_id: Option<String>
}

/// struct for passing parameters to the method `apps_approved_list`
#[derive(Clone, Debug)]
pub struct AppsApprovedListParams {
    /// Authentication token. Requires scope: `admin.apps:read`
    pub token: String,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    pub cursor: Option<String>,
    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    pub limit: Option<i32>,
    pub team_id: Option<String>,
    pub enterprise_id: Option<String>
}

/// struct for passing parameters to the method `apps_requests_list`
#[derive(Clone, Debug)]
pub struct AppsRequestsListParams {
    /// Authentication token. Requires scope: `admin.apps:read`
    pub token: String,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    pub cursor: Option<String>,
    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    pub limit: Option<i32>,
    pub team_id: Option<String>
}

/// struct for passing parameters to the method `apps_restrict`
#[derive(Clone, Debug)]
pub struct AppsRestrictParams {
    /// Authentication token. Requires scope: `admin.apps:write`
    pub token: String,
    pub team_id: Option<String>,
    /// The id of the app to restrict.
    pub app_id: Option<String>,
    /// The id of the request to restrict.
    pub request_id: Option<String>
}

/// struct for passing parameters to the method `apps_restricted_list`
#[derive(Clone, Debug)]
pub struct AppsRestrictedListParams {
    /// Authentication token. Requires scope: `admin.apps:read`
    pub token: String,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    pub cursor: Option<String>,
    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    pub limit: Option<i32>,
    pub team_id: Option<String>,
    pub enterprise_id: Option<String>
}

/// struct for passing parameters to the method `conversations_set_teams`
#[derive(Clone, Debug)]
pub struct ConversationsSetTeamsParams {
    /// The encoded `channel_id` to add or remove to workspaces.
    pub channel_id: String,
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// True if channel has to be converted to an org channel
    pub org_channel: Option<bool>,
    /// The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel.
    pub team_id: Option<String>,
    /// The list of workspaces to which the channel should be shared. Not required if the channel is being shared orgwide. Example: `['T1234', 'T5678']`
    pub target_team_ids: Option<String>
}

/// struct for passing parameters to the method `emoji_add`
#[derive(Clone, Debug)]
pub struct EmojiAddParams {
    /// The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.
    pub url: String,
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.
    pub name: String
}

/// struct for passing parameters to the method `emoji_add_alias`
#[derive(Clone, Debug)]
pub struct EmojiAddAliasParams {
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included.
    pub name: String,
    /// The alias of the emoji.
    pub alias_for: String
}

/// struct for passing parameters to the method `emoji_list`
#[derive(Clone, Debug)]
pub struct EmojiListParams {
    /// Authentication token. Requires scope: `admin.teams:read`
    pub token: String,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    pub cursor: Option<String>,
    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    pub limit: Option<i32>
}

/// struct for passing parameters to the method `emoji_remove`
#[derive(Clone, Debug)]
pub struct EmojiRemoveParams {
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.
    pub name: String
}

/// struct for passing parameters to the method `emoji_rename`
#[derive(Clone, Debug)]
pub struct EmojiRenameParams {
    /// The new name of the emoji.
    pub new_name: String,
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included.
    pub name: String
}

/// struct for passing parameters to the method `invite_requests_approve`
#[derive(Clone, Debug)]
pub struct InviteRequestsApproveParams {
    /// Authentication token. Requires scope: `admin.invites:write`
    pub token: String,
    /// ID of the request to invite.
    pub invite_request_id: String,
    /// ID for the workspace where the invite request was made.
    pub team_id: Option<String>
}

/// struct for passing parameters to the method `invite_requests_approved_list`
#[derive(Clone, Debug)]
pub struct InviteRequestsApprovedListParams {
    /// Authentication token. Requires scope: `admin.invites:read`
    pub token: String,
    /// Value of the `next_cursor` field sent as part of the previous API response
    pub cursor: Option<String>,
    /// The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
    pub limit: Option<i32>,
    /// ID for the workspace where the invite requests were made.
    pub team_id: Option<String>
}

/// struct for passing parameters to the method `invite_requests_denied_list`
#[derive(Clone, Debug)]
pub struct InviteRequestsDeniedListParams {
    /// Authentication token. Requires scope: `admin.invites:read`
    pub token: String,
    /// Value of the `next_cursor` field sent as part of the previous api response
    pub cursor: Option<String>,
    /// The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive
    pub limit: Option<i32>,
    /// ID for the workspace where the invite requests were made.
    pub team_id: Option<String>
}

/// struct for passing parameters to the method `invite_requests_deny`
#[derive(Clone, Debug)]
pub struct InviteRequestsDenyParams {
    /// Authentication token. Requires scope: `admin.invites:write`
    pub token: String,
    /// ID of the request to invite.
    pub invite_request_id: String,
    /// ID for the workspace where the invite request was made.
    pub team_id: Option<String>
}

/// struct for passing parameters to the method `invite_requests_list`
#[derive(Clone, Debug)]
pub struct InviteRequestsListParams {
    /// Authentication token. Requires scope: `admin.invites:read`
    pub token: String,
    /// Value of the `next_cursor` field sent as part of the previous API response
    pub cursor: Option<String>,
    /// The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
    pub limit: Option<i32>,
    /// ID for the workspace where the invite requests were made.
    pub team_id: Option<String>
}

/// struct for passing parameters to the method `teams_admins_list`
#[derive(Clone, Debug)]
pub struct TeamsAdminsListParams {
    /// Authentication token. Requires scope: `admin.teams:read`
    pub token: String,
    pub team_id: String,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    pub cursor: Option<String>,
    /// The maximum number of items to return.
    pub limit: Option<i32>
}

/// struct for passing parameters to the method `teams_create`
#[derive(Clone, Debug)]
pub struct TeamsCreateParams {
    /// Team domain (for example, slacksoftballteam).
    pub team_domain: String,
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// Team name (for example, Slack Softball Team).
    pub team_name: String,
    /// Description for the team.
    pub team_description: Option<String>,
    /// Who can join the team. A team's discoverability can be `open`, `closed`, `invite_only`, or `unlisted`.
    pub team_discoverability: Option<String>
}

/// struct for passing parameters to the method `teams_list`
#[derive(Clone, Debug)]
pub struct TeamsListParams {
    /// Authentication token. Requires scope: `admin.teams:read`
    pub token: String,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    pub cursor: Option<String>,
    /// The maximum number of items to return. Must be between 1 - 100 both inclusive.
    pub limit: Option<i32>
}

/// struct for passing parameters to the method `teams_owners_list`
#[derive(Clone, Debug)]
pub struct TeamsOwnersListParams {
    /// Authentication token. Requires scope: `admin.teams:read`
    pub token: String,
    pub team_id: String,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    pub cursor: Option<String>,
    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    pub limit: Option<i32>
}

/// struct for passing parameters to the method `teams_settings_info`
#[derive(Clone, Debug)]
pub struct TeamsSettingsInfoParams {
    /// Authentication token. Requires scope: `admin.teams:read`
    pub token: String,
    pub team_id: String
}

/// struct for passing parameters to the method `teams_settings_set_default_channels`
#[derive(Clone, Debug)]
pub struct TeamsSettingsSetDefaultChannelsParams {
    /// An array of channel IDs.
    pub channel_ids: String,
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// ID for the workspace to set the default channel for.
    pub team_id: String
}

/// struct for passing parameters to the method `teams_settings_set_description`
#[derive(Clone, Debug)]
pub struct TeamsSettingsSetDescriptionParams {
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// ID for the workspace to set the description for.
    pub team_id: String,
    /// The new description for the workspace.
    pub description: String
}

/// struct for passing parameters to the method `teams_settings_set_discoverability`
#[derive(Clone, Debug)]
pub struct TeamsSettingsSetDiscoverabilityParams {
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// The ID of the workspace to set discoverability on.
    pub team_id: String,
    /// This workspace's discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`.
    pub discoverability: String
}

/// struct for passing parameters to the method `teams_settings_set_icon`
#[derive(Clone, Debug)]
pub struct TeamsSettingsSetIconParams {
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// Image URL for the icon
    pub image_url: String,
    /// ID for the workspace to set the icon for.
    pub team_id: String
}

/// struct for passing parameters to the method `teams_settings_set_name`
#[derive(Clone, Debug)]
pub struct TeamsSettingsSetNameParams {
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// ID for the workspace to set the name for.
    pub team_id: String,
    /// The new name of the workspace.
    pub name: String
}

/// struct for passing parameters to the method `users_assign`
#[derive(Clone, Debug)]
pub struct UsersAssignParams {
    /// The ID of the user to add to the workspace.
    pub user_id: String,
    /// The ID (`T1234`) of the workspace.
    pub team_id: String,
    /// Authentication token. Requires scope: `admin.users:write`
    pub token: String,
    /// Comma separated values of channel IDs to add user in the new workspace.
    pub channel_ids: Option<String>,
    /// True if user should be added to the workspace as a single-channel guest.
    pub is_ultra_restricted: Option<bool>,
    /// True if user should be added to the workspace as a guest.
    pub is_restricted: Option<bool>
}

/// struct for passing parameters to the method `users_invite`
#[derive(Clone, Debug)]
pub struct UsersInviteParams {
    /// A comma-separated list of `channel_id`s for this user to join. At least one channel is required.
    pub channel_ids: String,
    /// The ID (`T1234`) of the workspace.
    pub team_id: String,
    /// Authentication token. Requires scope: `admin.users:write`
    pub token: String,
    /// The email address of the person to invite.
    pub email: String,
    /// Full name of the user.
    pub real_name: Option<String>,
    /// Is this user a single channel guest user? (default: false)
    pub is_ultra_restricted: Option<bool>,
    /// An optional message to send to the user in the invite email.
    pub custom_message: Option<String>,
    /// Is this user a multi-channel guest user? (default: false)
    pub is_restricted: Option<bool>,
    /// Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
    pub guest_expiration_ts: Option<String>,
    /// Allow this invite to be resent in the future if a user has not signed up yet. (default: false)
    pub resend: Option<bool>
}

/// struct for passing parameters to the method `users_list`
#[derive(Clone, Debug)]
pub struct UsersListParams {
    /// Authentication token. Requires scope: `admin.users:read`
    pub token: String,
    /// The ID (`T1234`) of the workspace.
    pub team_id: String,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    pub cursor: Option<String>,
    /// Limit for how many users to be retrieved per page
    pub limit: Option<i32>
}

/// struct for passing parameters to the method `users_remove`
#[derive(Clone, Debug)]
pub struct UsersRemoveParams {
    /// Authentication token. Requires scope: `admin.users:write`
    pub token: String,
    /// The ID of the user to remove.
    pub user_id: String,
    /// The ID (`T1234`) of the workspace.
    pub team_id: String
}

/// struct for passing parameters to the method `users_session_reset`
#[derive(Clone, Debug)]
pub struct UsersSessionResetParams {
    /// Authentication token. Requires scope: `admin.users:write`
    pub token: String,
    /// The ID of the user to wipe sessions for
    pub user_id: String,
    /// Only expire mobile sessions (default: false)
    pub mobile_only: Option<bool>,
    /// Only expire web sessions (default: false)
    pub web_only: Option<bool>
}

/// struct for passing parameters to the method `users_set_admin`
#[derive(Clone, Debug)]
pub struct UsersSetAdminParams {
    /// Authentication token. Requires scope: `admin.users:write`
    pub token: String,
    /// The ID of the user to designate as an admin.
    pub user_id: String,
    /// The ID (`T1234`) of the workspace.
    pub team_id: String
}

/// struct for passing parameters to the method `users_set_expiration`
#[derive(Clone, Debug)]
pub struct UsersSetExpirationParams {
    /// Timestamp when guest account should be disabled.
    pub expiration_ts: i32,
    /// Authentication token. Requires scope: `admin.users:write`
    pub token: String,
    /// The ID of the user to set an expiration for.
    pub user_id: String,
    /// The ID (`T1234`) of the workspace.
    pub team_id: String
}

/// struct for passing parameters to the method `users_set_owner`
#[derive(Clone, Debug)]
pub struct UsersSetOwnerParams {
    /// Authentication token. Requires scope: `admin.users:write`
    pub token: String,
    /// Id of the user to promote to owner.
    pub user_id: String,
    /// The ID (`T1234`) of the workspace.
    pub team_id: String
}

/// struct for passing parameters to the method `users_set_regular`
#[derive(Clone, Debug)]
pub struct UsersSetRegularParams {
    /// Authentication token. Requires scope: `admin.users:write`
    pub token: String,
    /// The ID of the user to designate as a regular user.
    pub user_id: String,
    /// The ID (`T1234`) of the workspace.
    pub team_id: String
}


/// struct for typed errors of method `apps_approve`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AppsApproveError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `apps_approved_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AppsApprovedListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `apps_requests_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AppsRequestsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `apps_restrict`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AppsRestrictError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `apps_restricted_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AppsRestrictedListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `conversations_set_teams`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ConversationsSetTeamsError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `emoji_add`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EmojiAddError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `emoji_add_alias`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EmojiAddAliasError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `emoji_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EmojiListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `emoji_remove`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EmojiRemoveError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `emoji_rename`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EmojiRenameError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `invite_requests_approve`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InviteRequestsApproveError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `invite_requests_approved_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InviteRequestsApprovedListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `invite_requests_denied_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InviteRequestsDeniedListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `invite_requests_deny`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InviteRequestsDenyError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `invite_requests_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InviteRequestsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `teams_admins_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TeamsAdminsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `teams_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TeamsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `teams_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TeamsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `teams_owners_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TeamsOwnersListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `teams_settings_info`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TeamsSettingsInfoError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `teams_settings_set_default_channels`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TeamsSettingsSetDefaultChannelsError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `teams_settings_set_description`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TeamsSettingsSetDescriptionError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `teams_settings_set_discoverability`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TeamsSettingsSetDiscoverabilityError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `teams_settings_set_icon`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TeamsSettingsSetIconError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `teams_settings_set_name`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TeamsSettingsSetNameError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_assign`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersAssignError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_invite`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersInviteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_remove`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersRemoveError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_session_reset`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersSessionResetError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_set_admin`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersSetAdminError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_set_expiration`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersSetExpirationError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_set_owner`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersSetOwnerError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_set_regular`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersSetRegularError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}


/// Approve an app for installation on a workspace.
pub async fn apps_approve(configuration: &configuration::Configuration, params: AppsApproveParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<AppsApproveError>> {
    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let app_id = params.app_id;
    let request_id = params.request_id;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.apps.approve", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    if let Some(param_value) = team_id {
        form_params.insert("team_id", param_value.to_string());
    }
    form_params.insert("token", token.to_string());
    if let Some(param_value) = app_id {
        form_params.insert("app_id", param_value.to_string());
    }
    if let Some(param_value) = request_id {
        form_params.insert("request_id", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<AppsApproveError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// List approved apps for an org or workspace.
pub async fn apps_approved_list(configuration: &configuration::Configuration, params: AppsApprovedListParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<AppsApprovedListError>> {
    // unbox the parameters
    let token = params.token;
    let cursor = params.cursor;
    let limit = params.limit;
    let team_id = params.team_id;
    let enterprise_id = params.enterprise_id;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.apps.approved.list", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = cursor {
        req_builder = req_builder.query(&[("cursor", &s.to_string())]);
    }
    req_builder = req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref s) = limit {
        req_builder = req_builder.query(&[("limit", &s.to_string())]);
    }
    if let Some(ref s) = team_id {
        req_builder = req_builder.query(&[("team_id", &s.to_string())]);
    }
    if let Some(ref s) = enterprise_id {
        req_builder = req_builder.query(&[("enterprise_id", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<AppsApprovedListError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// List app requests for a team/workspace.
pub async fn apps_requests_list(configuration: &configuration::Configuration, params: AppsRequestsListParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<AppsRequestsListError>> {
    // unbox the parameters
    let token = params.token;
    let cursor = params.cursor;
    let limit = params.limit;
    let team_id = params.team_id;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.apps.requests.list", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = cursor {
        req_builder = req_builder.query(&[("cursor", &s.to_string())]);
    }
    req_builder = req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref s) = limit {
        req_builder = req_builder.query(&[("limit", &s.to_string())]);
    }
    if let Some(ref s) = team_id {
        req_builder = req_builder.query(&[("team_id", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<AppsRequestsListError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Restrict an app for installation on a workspace.
pub async fn apps_restrict(configuration: &configuration::Configuration, params: AppsRestrictParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<AppsRestrictError>> {
    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let app_id = params.app_id;
    let request_id = params.request_id;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.apps.restrict", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    if let Some(param_value) = team_id {
        form_params.insert("team_id", param_value.to_string());
    }
    form_params.insert("token", token.to_string());
    if let Some(param_value) = app_id {
        form_params.insert("app_id", param_value.to_string());
    }
    if let Some(param_value) = request_id {
        form_params.insert("request_id", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<AppsRestrictError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// List restricted apps for an org or workspace.
pub async fn apps_restricted_list(configuration: &configuration::Configuration, params: AppsRestrictedListParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<AppsRestrictedListError>> {
    // unbox the parameters
    let token = params.token;
    let cursor = params.cursor;
    let limit = params.limit;
    let team_id = params.team_id;
    let enterprise_id = params.enterprise_id;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.apps.restricted.list", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = cursor {
        req_builder = req_builder.query(&[("cursor", &s.to_string())]);
    }
    req_builder = req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref s) = limit {
        req_builder = req_builder.query(&[("limit", &s.to_string())]);
    }
    if let Some(ref s) = team_id {
        req_builder = req_builder.query(&[("team_id", &s.to_string())]);
    }
    if let Some(ref s) = enterprise_id {
        req_builder = req_builder.query(&[("enterprise_id", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<AppsRestrictedListError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Set the workspaces in an Enterprise grid org that connect to a channel.
pub async fn conversations_set_teams(configuration: &configuration::Configuration, params: ConversationsSetTeamsParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<ConversationsSetTeamsError>> {
    // unbox the parameters
    let channel_id = params.channel_id;
    let token = params.token;
    let org_channel = params.org_channel;
    let team_id = params.team_id;
    let target_team_ids = params.target_team_ids;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.conversations.setTeams", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("channel_id", channel_id.to_string());
    form_params.insert("token", token.to_string());
    if let Some(param_value) = org_channel {
        form_params.insert("org_channel", param_value.to_string());
    }
    if let Some(param_value) = team_id {
        form_params.insert("team_id", param_value.to_string());
    }
    if let Some(param_value) = target_team_ids {
        form_params.insert("target_team_ids", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<ConversationsSetTeamsError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Add an emoji.
pub async fn emoji_add(configuration: &configuration::Configuration, params: EmojiAddParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<EmojiAddError>> {
    // unbox the parameters
    let url = params.url;
    let token = params.token;
    let name = params.name;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.emoji.add", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("url", url.to_string());
    form_params.insert("token", token.to_string());
    form_params.insert("name", name.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<EmojiAddError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Add an emoji alias.
pub async fn emoji_add_alias(configuration: &configuration::Configuration, params: EmojiAddAliasParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<EmojiAddAliasError>> {
    // unbox the parameters
    let token = params.token;
    let name = params.name;
    let alias_for = params.alias_for;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.emoji.addAlias", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("token", token.to_string());
    form_params.insert("name", name.to_string());
    form_params.insert("alias_for", alias_for.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<EmojiAddAliasError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// List emoji for an Enterprise Grid organization.
pub async fn emoji_list(configuration: &configuration::Configuration, params: EmojiListParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<EmojiListError>> {
    // unbox the parameters
    let token = params.token;
    let cursor = params.cursor;
    let limit = params.limit;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.emoji.list", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = cursor {
        req_builder = req_builder.query(&[("cursor", &s.to_string())]);
    }
    req_builder = req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref s) = limit {
        req_builder = req_builder.query(&[("limit", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<EmojiListError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Remove an emoji across an Enterprise Grid organization
pub async fn emoji_remove(configuration: &configuration::Configuration, params: EmojiRemoveParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<EmojiRemoveError>> {
    // unbox the parameters
    let token = params.token;
    let name = params.name;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.emoji.remove", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("token", token.to_string());
    form_params.insert("name", name.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<EmojiRemoveError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Rename an emoji.
pub async fn emoji_rename(configuration: &configuration::Configuration, params: EmojiRenameParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<EmojiRenameError>> {
    // unbox the parameters
    let new_name = params.new_name;
    let token = params.token;
    let name = params.name;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.emoji.rename", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("new_name", new_name.to_string());
    form_params.insert("token", token.to_string());
    form_params.insert("name", name.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<EmojiRenameError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Approve a workspace invite request.
pub async fn invite_requests_approve(configuration: &configuration::Configuration, params: InviteRequestsApproveParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<InviteRequestsApproveError>> {
    // unbox the parameters
    let token = params.token;
    let invite_request_id = params.invite_request_id;
    let team_id = params.team_id;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.inviteRequests.approve", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("token", token.to_string());
    if let Some(param_value) = team_id {
        form_params.insert("team_id", param_value.to_string());
    }
    form_params.insert("invite_request_id", invite_request_id.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<InviteRequestsApproveError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// List all approved workspace invite requests.
pub async fn invite_requests_approved_list(configuration: &configuration::Configuration, params: InviteRequestsApprovedListParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<InviteRequestsApprovedListError>> {
    // unbox the parameters
    let token = params.token;
    let cursor = params.cursor;
    let limit = params.limit;
    let team_id = params.team_id;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.inviteRequests.approved.list", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = cursor {
        req_builder = req_builder.query(&[("cursor", &s.to_string())]);
    }
    req_builder = req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref s) = limit {
        req_builder = req_builder.query(&[("limit", &s.to_string())]);
    }
    if let Some(ref s) = team_id {
        req_builder = req_builder.query(&[("team_id", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<InviteRequestsApprovedListError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// List all denied workspace invite requests.
pub async fn invite_requests_denied_list(configuration: &configuration::Configuration, params: InviteRequestsDeniedListParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<InviteRequestsDeniedListError>> {
    // unbox the parameters
    let token = params.token;
    let cursor = params.cursor;
    let limit = params.limit;
    let team_id = params.team_id;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.inviteRequests.denied.list", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = cursor {
        req_builder = req_builder.query(&[("cursor", &s.to_string())]);
    }
    req_builder = req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref s) = limit {
        req_builder = req_builder.query(&[("limit", &s.to_string())]);
    }
    if let Some(ref s) = team_id {
        req_builder = req_builder.query(&[("team_id", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<InviteRequestsDeniedListError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Deny a workspace invite request.
pub async fn invite_requests_deny(configuration: &configuration::Configuration, params: InviteRequestsDenyParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<InviteRequestsDenyError>> {
    // unbox the parameters
    let token = params.token;
    let invite_request_id = params.invite_request_id;
    let team_id = params.team_id;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.inviteRequests.deny", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("token", token.to_string());
    if let Some(param_value) = team_id {
        form_params.insert("team_id", param_value.to_string());
    }
    form_params.insert("invite_request_id", invite_request_id.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<InviteRequestsDenyError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// List all pending workspace invite requests.
pub async fn invite_requests_list(configuration: &configuration::Configuration, params: InviteRequestsListParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<InviteRequestsListError>> {
    // unbox the parameters
    let token = params.token;
    let cursor = params.cursor;
    let limit = params.limit;
    let team_id = params.team_id;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.inviteRequests.list", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = cursor {
        req_builder = req_builder.query(&[("cursor", &s.to_string())]);
    }
    req_builder = req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref s) = limit {
        req_builder = req_builder.query(&[("limit", &s.to_string())]);
    }
    if let Some(ref s) = team_id {
        req_builder = req_builder.query(&[("team_id", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<InviteRequestsListError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// List all of the admins on a given workspace.
pub async fn teams_admins_list(configuration: &configuration::Configuration, params: TeamsAdminsListParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<TeamsAdminsListError>> {
    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let cursor = params.cursor;
    let limit = params.limit;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.teams.admins.list", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = cursor {
        req_builder = req_builder.query(&[("cursor", &s.to_string())]);
    }
    req_builder = req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref s) = limit {
        req_builder = req_builder.query(&[("limit", &s.to_string())]);
    }
    req_builder = req_builder.query(&[("team_id", &team_id.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<TeamsAdminsListError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Create an Enterprise team.
pub async fn teams_create(configuration: &configuration::Configuration, params: TeamsCreateParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<TeamsCreateError>> {
    // unbox the parameters
    let team_domain = params.team_domain;
    let token = params.token;
    let team_name = params.team_name;
    let team_description = params.team_description;
    let team_discoverability = params.team_discoverability;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.teams.create", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("team_domain", team_domain.to_string());
    form_params.insert("token", token.to_string());
    if let Some(param_value) = team_description {
        form_params.insert("team_description", param_value.to_string());
    }
    form_params.insert("team_name", team_name.to_string());
    if let Some(param_value) = team_discoverability {
        form_params.insert("team_discoverability", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<TeamsCreateError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// List all teams on an Enterprise organization
pub async fn teams_list(configuration: &configuration::Configuration, params: TeamsListParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<TeamsListError>> {
    // unbox the parameters
    let token = params.token;
    let cursor = params.cursor;
    let limit = params.limit;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.teams.list", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = cursor {
        req_builder = req_builder.query(&[("cursor", &s.to_string())]);
    }
    req_builder = req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref s) = limit {
        req_builder = req_builder.query(&[("limit", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<TeamsListError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// List all of the owners on a given workspace.
pub async fn teams_owners_list(configuration: &configuration::Configuration, params: TeamsOwnersListParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<TeamsOwnersListError>> {
    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let cursor = params.cursor;
    let limit = params.limit;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.teams.owners.list", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = cursor {
        req_builder = req_builder.query(&[("cursor", &s.to_string())]);
    }
    req_builder = req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref s) = limit {
        req_builder = req_builder.query(&[("limit", &s.to_string())]);
    }
    req_builder = req_builder.query(&[("team_id", &team_id.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<TeamsOwnersListError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Fetch information about settings in a workspace
pub async fn teams_settings_info(configuration: &configuration::Configuration, params: TeamsSettingsInfoParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<TeamsSettingsInfoError>> {
    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.teams.settings.info", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    req_builder = req_builder.query(&[("token", &token.to_string())]);
    req_builder = req_builder.query(&[("team_id", &team_id.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<TeamsSettingsInfoError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Set the default channels of a workspace.
pub async fn teams_settings_set_default_channels(configuration: &configuration::Configuration, params: TeamsSettingsSetDefaultChannelsParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<TeamsSettingsSetDefaultChannelsError>> {
    // unbox the parameters
    let channel_ids = params.channel_ids;
    let token = params.token;
    let team_id = params.team_id;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.teams.settings.setDefaultChannels", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("channel_ids", channel_ids.to_string());
    form_params.insert("token", token.to_string());
    form_params.insert("team_id", team_id.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<TeamsSettingsSetDefaultChannelsError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Set the description of a given workspace.
pub async fn teams_settings_set_description(configuration: &configuration::Configuration, params: TeamsSettingsSetDescriptionParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<TeamsSettingsSetDescriptionError>> {
    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let description = params.description;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.teams.settings.setDescription", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("token", token.to_string());
    form_params.insert("team_id", team_id.to_string());
    form_params.insert("description", description.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<TeamsSettingsSetDescriptionError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// An API method that allows admins to set the discoverability of a given workspace
pub async fn teams_settings_set_discoverability(configuration: &configuration::Configuration, params: TeamsSettingsSetDiscoverabilityParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<TeamsSettingsSetDiscoverabilityError>> {
    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let discoverability = params.discoverability;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.teams.settings.setDiscoverability", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("token", token.to_string());
    form_params.insert("team_id", team_id.to_string());
    form_params.insert("discoverability", discoverability.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<TeamsSettingsSetDiscoverabilityError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Sets the icon of a workspace.
pub async fn teams_settings_set_icon(configuration: &configuration::Configuration, params: TeamsSettingsSetIconParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<TeamsSettingsSetIconError>> {
    // unbox the parameters
    let token = params.token;
    let image_url = params.image_url;
    let team_id = params.team_id;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.teams.settings.setIcon", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("token", token.to_string());
    form_params.insert("image_url", image_url.to_string());
    form_params.insert("team_id", team_id.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<TeamsSettingsSetIconError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Set the name of a given workspace.
pub async fn teams_settings_set_name(configuration: &configuration::Configuration, params: TeamsSettingsSetNameParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<TeamsSettingsSetNameError>> {
    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let name = params.name;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.teams.settings.setName", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("token", token.to_string());
    form_params.insert("team_id", team_id.to_string());
    form_params.insert("name", name.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<TeamsSettingsSetNameError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Add an Enterprise user to a workspace.
pub async fn users_assign(configuration: &configuration::Configuration, params: UsersAssignParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<UsersAssignError>> {
    // unbox the parameters
    let user_id = params.user_id;
    let team_id = params.team_id;
    let token = params.token;
    let channel_ids = params.channel_ids;
    let is_ultra_restricted = params.is_ultra_restricted;
    let is_restricted = params.is_restricted;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.users.assign", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("user_id", user_id.to_string());
    if let Some(param_value) = channel_ids {
        form_params.insert("channel_ids", param_value.to_string());
    }
    form_params.insert("team_id", team_id.to_string());
    form_params.insert("token", token.to_string());
    if let Some(param_value) = is_ultra_restricted {
        form_params.insert("is_ultra_restricted", param_value.to_string());
    }
    if let Some(param_value) = is_restricted {
        form_params.insert("is_restricted", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<UsersAssignError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Invite a user to a workspace.
pub async fn users_invite(configuration: &configuration::Configuration, params: UsersInviteParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<UsersInviteError>> {
    // unbox the parameters
    let channel_ids = params.channel_ids;
    let team_id = params.team_id;
    let token = params.token;
    let email = params.email;
    let real_name = params.real_name;
    let is_ultra_restricted = params.is_ultra_restricted;
    let custom_message = params.custom_message;
    let is_restricted = params.is_restricted;
    let guest_expiration_ts = params.guest_expiration_ts;
    let resend = params.resend;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.users.invite", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("channel_ids", channel_ids.to_string());
    form_params.insert("team_id", team_id.to_string());
    if let Some(param_value) = real_name {
        form_params.insert("real_name", param_value.to_string());
    }
    form_params.insert("token", token.to_string());
    if let Some(param_value) = is_ultra_restricted {
        form_params.insert("is_ultra_restricted", param_value.to_string());
    }
    if let Some(param_value) = custom_message {
        form_params.insert("custom_message", param_value.to_string());
    }
    if let Some(param_value) = is_restricted {
        form_params.insert("is_restricted", param_value.to_string());
    }
    if let Some(param_value) = guest_expiration_ts {
        form_params.insert("guest_expiration_ts", param_value.to_string());
    }
    form_params.insert("email", email.to_string());
    if let Some(param_value) = resend {
        form_params.insert("resend", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<UsersInviteError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// List users on a workspace
pub async fn users_list(configuration: &configuration::Configuration, params: UsersListParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<UsersListError>> {
    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let cursor = params.cursor;
    let limit = params.limit;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.users.list", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = cursor {
        req_builder = req_builder.query(&[("cursor", &s.to_string())]);
    }
    req_builder = req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref s) = limit {
        req_builder = req_builder.query(&[("limit", &s.to_string())]);
    }
    req_builder = req_builder.query(&[("team_id", &team_id.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<UsersListError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Remove a user from a workspace.
pub async fn users_remove(configuration: &configuration::Configuration, params: UsersRemoveParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<UsersRemoveError>> {
    // unbox the parameters
    let token = params.token;
    let user_id = params.user_id;
    let team_id = params.team_id;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.users.remove", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("token", token.to_string());
    form_params.insert("user_id", user_id.to_string());
    form_params.insert("team_id", team_id.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<UsersRemoveError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Wipes all valid sessions on all devices for a given user
pub async fn users_session_reset(configuration: &configuration::Configuration, params: UsersSessionResetParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<UsersSessionResetError>> {
    // unbox the parameters
    let token = params.token;
    let user_id = params.user_id;
    let mobile_only = params.mobile_only;
    let web_only = params.web_only;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.users.session.reset", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    if let Some(param_value) = mobile_only {
        form_params.insert("mobile_only", param_value.to_string());
    }
    form_params.insert("token", token.to_string());
    form_params.insert("user_id", user_id.to_string());
    if let Some(param_value) = web_only {
        form_params.insert("web_only", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<UsersSessionResetError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Set an existing guest, regular user, or owner to be an admin user.
pub async fn users_set_admin(configuration: &configuration::Configuration, params: UsersSetAdminParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<UsersSetAdminError>> {
    // unbox the parameters
    let token = params.token;
    let user_id = params.user_id;
    let team_id = params.team_id;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.users.setAdmin", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("token", token.to_string());
    form_params.insert("user_id", user_id.to_string());
    form_params.insert("team_id", team_id.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<UsersSetAdminError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Set an expiration for a guest user
pub async fn users_set_expiration(configuration: &configuration::Configuration, params: UsersSetExpirationParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<UsersSetExpirationError>> {
    // unbox the parameters
    let expiration_ts = params.expiration_ts;
    let token = params.token;
    let user_id = params.user_id;
    let team_id = params.team_id;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.users.setExpiration", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("expiration_ts", expiration_ts.to_string());
    form_params.insert("token", token.to_string());
    form_params.insert("user_id", user_id.to_string());
    form_params.insert("team_id", team_id.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<UsersSetExpirationError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Set an existing guest, regular user, or admin user to be a workspace owner.
pub async fn users_set_owner(configuration: &configuration::Configuration, params: UsersSetOwnerParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<UsersSetOwnerError>> {
    // unbox the parameters
    let token = params.token;
    let user_id = params.user_id;
    let team_id = params.team_id;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.users.setOwner", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("token", token.to_string());
    form_params.insert("user_id", user_id.to_string());
    form_params.insert("team_id", team_id.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<UsersSetOwnerError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Set an existing guest user, admin user, or owner to be a regular user.
pub async fn users_set_regular(configuration: &configuration::Configuration, params: UsersSetRegularParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<UsersSetRegularError>> {
    // unbox the parameters
    let token = params.token;
    let user_id = params.user_id;
    let team_id = params.team_id;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.users.setRegular", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("token", token.to_string());
    form_params.insert("user_id", user_id.to_string());
    form_params.insert("team_id", team_id.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<UsersSetRegularError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

