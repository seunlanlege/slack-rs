/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::rc::Rc;

use std::option::Option;

use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `permissions_info`
#[derive(Clone, Debug)]
pub struct PermissionsInfoParams {
    /// Authentication token. Requires scope: `none`
    pub token: Option<String>
}

/// struct for passing parameters to the method `permissions_request`
#[derive(Clone, Debug)]
pub struct PermissionsRequestParams {
    /// A comma separated list of scopes to request for
    pub scopes: String,
    /// Authentication token. Requires scope: `none`
    pub token: String,
    /// Token used to trigger the permissions API
    pub trigger_id: String
}

/// struct for passing parameters to the method `permissions_resources_list`
#[derive(Clone, Debug)]
pub struct PermissionsResourcesListParams {
    /// Authentication token. Requires scope: `none`
    pub token: String,
    /// Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.
    pub cursor: Option<String>,
    /// The maximum number of items to return.
    pub limit: Option<i32>
}

/// struct for passing parameters to the method `permissions_scopes_list`
#[derive(Clone, Debug)]
pub struct PermissionsScopesListParams {
    /// Authentication token. Requires scope: `none`
    pub token: String
}

/// struct for passing parameters to the method `permissions_users_list`
#[derive(Clone, Debug)]
pub struct PermissionsUsersListParams {
    /// Authentication token. Requires scope: `none`
    pub token: String,
    /// Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.
    pub cursor: Option<String>,
    /// The maximum number of items to return.
    pub limit: Option<i32>
}

/// struct for passing parameters to the method `permissions_users_request`
#[derive(Clone, Debug)]
pub struct PermissionsUsersRequestParams {
    /// A comma separated list of user scopes to request for
    pub scopes: String,
    /// Authentication token. Requires scope: `none`
    pub token: String,
    /// The user this scope is being requested for
    pub user: String,
    /// Token used to trigger the request
    pub trigger_id: String
}

/// struct for passing parameters to the method `uninstall`
#[derive(Clone, Debug)]
pub struct UninstallParams {
    /// Issued when you created your application.
    pub client_secret: Option<String>,
    /// Authentication token. Requires scope: `none`
    pub token: Option<String>,
    /// Issued when you created your application.
    pub client_id: Option<String>
}


/// struct for typed errors of method `permissions_info`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PermissionsInfoError {
    DefaultResponse(crate::models::AppsPermissionsInfoErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `permissions_request`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PermissionsRequestError {
    DefaultResponse(crate::models::AppsPermissionsRequestErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `permissions_resources_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PermissionsResourcesListError {
    DefaultResponse(crate::models::AppsPermissionsResourcesListErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `permissions_scopes_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PermissionsScopesListError {
    DefaultResponse(crate::models::AppsPermissionsScopesListErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `permissions_users_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PermissionsUsersListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `permissions_users_request`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PermissionsUsersRequestError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `uninstall`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UninstallError {
    DefaultResponse(crate::models::AppsUninstallErrorSchema),
    UnknownValue(serde_json::Value),
}


    pub async fn permissions_info(configuration: &configuration::Configuration, params: PermissionsInfoParams) -> Result<crate::models::AppsPermissionsInfoSchema, Error<PermissionsInfoError>> {
        // unbox the parameters
        let token = params.token;

        let client = &configuration.client;

        let uri_str = format!("{}/apps.permissions.info", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = token {
            req_builder = req_builder.query(&[("token", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<PermissionsInfoError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn permissions_request(configuration: &configuration::Configuration, params: PermissionsRequestParams) -> Result<crate::models::AppsPermissionsRequestSchema, Error<PermissionsRequestError>> {
        // unbox the parameters
        let scopes = params.scopes;
        let token = params.token;
        let trigger_id = params.trigger_id;

        let client = &configuration.client;

        let uri_str = format!("{}/apps.permissions.request", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("scopes", &scopes.to_string())]);
        req_builder = req_builder.query(&[("token", &token.to_string())]);
        req_builder = req_builder.query(&[("trigger_id", &trigger_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<PermissionsRequestError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn permissions_resources_list(configuration: &configuration::Configuration, params: PermissionsResourcesListParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<PermissionsResourcesListError>> {
        // unbox the parameters
        let token = params.token;
        let cursor = params.cursor;
        let limit = params.limit;

        let client = &configuration.client;

        let uri_str = format!("{}/apps.permissions.resources.list", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = cursor {
            req_builder = req_builder.query(&[("cursor", &s.to_string())]);
        }
        req_builder = req_builder.query(&[("token", &token.to_string())]);
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<PermissionsResourcesListError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn permissions_scopes_list(configuration: &configuration::Configuration, params: PermissionsScopesListParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<PermissionsScopesListError>> {
        // unbox the parameters
        let token = params.token;

        let client = &configuration.client;

        let uri_str = format!("{}/apps.permissions.scopes.list", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("token", &token.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<PermissionsScopesListError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn permissions_users_list(configuration: &configuration::Configuration, params: PermissionsUsersListParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<PermissionsUsersListError>> {
        // unbox the parameters
        let token = params.token;
        let cursor = params.cursor;
        let limit = params.limit;

        let client = &configuration.client;

        let uri_str = format!("{}/apps.permissions.users.list", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = cursor {
            req_builder = req_builder.query(&[("cursor", &s.to_string())]);
        }
        req_builder = req_builder.query(&[("token", &token.to_string())]);
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<PermissionsUsersListError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn permissions_users_request(configuration: &configuration::Configuration, params: PermissionsUsersRequestParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<PermissionsUsersRequestError>> {
        // unbox the parameters
        let scopes = params.scopes;
        let token = params.token;
        let user = params.user;
        let trigger_id = params.trigger_id;

        let client = &configuration.client;

        let uri_str = format!("{}/apps.permissions.users.request", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("scopes", &scopes.to_string())]);
        req_builder = req_builder.query(&[("token", &token.to_string())]);
        req_builder = req_builder.query(&[("user", &user.to_string())]);
        req_builder = req_builder.query(&[("trigger_id", &trigger_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<PermissionsUsersRequestError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn uninstall(configuration: &configuration::Configuration, params: UninstallParams) -> Result<crate::models::AppsUninstallSchema, Error<UninstallError>> {
        // unbox the parameters
        let client_secret = params.client_secret;
        let token = params.token;
        let client_id = params.client_id;

        let client = &configuration.client;

        let uri_str = format!("{}/apps.uninstall", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = client_secret {
            req_builder = req_builder.query(&[("client_secret", &s.to_string())]);
        }
        if let Some(ref s) = token {
            req_builder = req_builder.query(&[("token", &s.to_string())]);
        }
        if let Some(ref s) = client_id {
            req_builder = req_builder.query(&[("client_id", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<UninstallError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

