/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `users_session_reset`
#[derive(Clone, Debug)]
pub struct UsersSessionResetParams {
    /// Authentication token. Requires scope: `admin.users:write`
    pub token: String,
    /// The ID of the user to wipe sessions for
    pub user_id: String,
    /// Only expire mobile sessions (default: false)
    pub mobile_only: Option<bool>,
    /// Only expire web sessions (default: false)
    pub web_only: Option<bool>
}


/// struct for typed errors of method `users_session_reset`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersSessionResetError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}


/// Wipes all valid sessions on all devices for a given user
pub async fn users_session_reset(configuration: &configuration::Configuration, params: UsersSessionResetParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<UsersSessionResetError>> {
    // unbox the parameters
    let token = params.token;
    let user_id = params.user_id;
    let mobile_only = params.mobile_only;
    let web_only = params.web_only;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.users.session.reset", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    if let Some(param_value) = mobile_only {
        form_params.insert("mobile_only", param_value.to_string());
    }
    form_params.insert("token", token.to_string());
    form_params.insert("user_id", user_id.to_string());
    if let Some(param_value) = web_only {
        form_params.insert("web_only", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<UsersSessionResetError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

