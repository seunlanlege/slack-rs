/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::rc::Rc;

use std::option::Option;

use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `permissions_info`
#[derive(Clone, Debug)]
pub struct PermissionsInfoParams {
    /// Authentication token. Requires scope: `none`
    pub token: Option<String>
}

/// struct for passing parameters to the method `permissions_request`
#[derive(Clone, Debug)]
pub struct PermissionsRequestParams {
    /// A comma separated list of scopes to request for
    pub scopes: String,
    /// Authentication token. Requires scope: `none`
    pub token: String,
    /// Token used to trigger the permissions API
    pub trigger_id: String
}


/// struct for typed errors of method `permissions_info`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PermissionsInfoError {
    DefaultResponse(crate::models::AppsPermissionsInfoErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `permissions_request`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PermissionsRequestError {
    DefaultResponse(crate::models::AppsPermissionsRequestErrorSchema),
    UnknownValue(serde_json::Value),
}


    pub async fn permissions_info(configuration: &configuration::Configuration, params: PermissionsInfoParams) -> Result<crate::models::AppsPermissionsInfoSchema, Error<PermissionsInfoError>> {
        // unbox the parameters
        let token = params.token;

        let client = &configuration.client;

        let uri_str = format!("{}/apps.permissions.info", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = token {
            req_builder = req_builder.query(&[("token", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<PermissionsInfoError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn permissions_request(configuration: &configuration::Configuration, params: PermissionsRequestParams) -> Result<crate::models::AppsPermissionsRequestSchema, Error<PermissionsRequestError>> {
        // unbox the parameters
        let scopes = params.scopes;
        let token = params.token;
        let trigger_id = params.trigger_id;

        let client = &configuration.client;

        let uri_str = format!("{}/apps.permissions.request", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("scopes", &scopes.to_string())]);
        req_builder = req_builder.query(&[("token", &token.to_string())]);
        req_builder = req_builder.query(&[("trigger_id", &trigger_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<PermissionsRequestError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

