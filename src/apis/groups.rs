/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `archive`
#[derive(Clone, Debug)]
pub struct ArchiveParams {
    /// Authentication token. Requires scope: `groups:write`
    pub token: Option<String>,
    /// Private channel to archive
    pub channel: Option<String>
}

/// struct for passing parameters to the method `create`
#[derive(Clone, Debug)]
pub struct CreateParams {
    /// Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.
    pub validate: Option<bool>,
    /// Authentication token. Requires scope: `groups:write`
    pub token: Option<String>,
    /// Name of private channel to create
    pub name: Option<String>
}

/// struct for passing parameters to the method `create_child`
#[derive(Clone, Debug)]
pub struct CreateChildParams {
    /// Authentication token. Requires scope: `groups:write`
    pub token: Option<String>,
    /// Private channel to clone and archive.
    pub channel: Option<String>
}

/// struct for passing parameters to the method `history`
#[derive(Clone, Debug)]
pub struct HistoryParams {
    /// Number of messages to return, between 1 and 1000.
    pub count: Option<i32>,
    /// Include `unread_count_display` in the output?
    pub unreads: Option<bool>,
    /// Include messages with latest or oldest timestamp in results.
    pub inclusive: Option<bool>,
    /// Authentication token. Requires scope: `groups:history`
    pub token: Option<String>,
    /// Start of time range of messages to include in results.
    pub oldest: Option<f32>,
    /// Private channel to fetch history for.
    pub channel: Option<String>,
    /// End of time range of messages to include in results.
    pub latest: Option<f32>
}

/// struct for passing parameters to the method `info`
#[derive(Clone, Debug)]
pub struct InfoParams {
    /// Authentication token. Requires scope: `groups:read`
    pub token: Option<String>,
    /// Set this to `true` to receive the locale for this group. Defaults to `false`
    pub include_locale: Option<bool>,
    /// Private channel to get info on
    pub channel: Option<String>
}

/// struct for passing parameters to the method `invite`
#[derive(Clone, Debug)]
pub struct InviteParams {
    /// Authentication token. Requires scope: `groups:write`
    pub token: Option<String>,
    /// User to invite.
    pub user: Option<String>,
    /// Private channel to invite user to.
    pub channel: Option<String>
}

/// struct for passing parameters to the method `kick`
#[derive(Clone, Debug)]
pub struct KickParams {
    /// Authentication token. Requires scope: `groups:write`
    pub token: String,
    /// User to remove from private channel.
    pub user: String,
    /// Private channel to remove user from.
    pub channel: String
}

/// struct for passing parameters to the method `leave`
#[derive(Clone, Debug)]
pub struct LeaveParams {
    /// Authentication token. Requires scope: `groups:write`
    pub token: String,
    /// Private channel to leave
    pub channel: String
}

/// struct for passing parameters to the method `list`
#[derive(Clone, Debug)]
pub struct ListParams {
    /// Exclude the `members` from each `group`
    pub exclude_members: Option<bool>,
    /// Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.
    pub cursor: Option<String>,
    /// Authentication token. Requires scope: `groups:read`
    pub token: Option<String>,
    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
    pub limit: Option<i32>,
    /// Don't return archived private channels.
    pub exclude_archived: Option<bool>
}

/// struct for passing parameters to the method `mark`
#[derive(Clone, Debug)]
pub struct MarkParams {
    /// Authentication token. Requires scope: `groups:write`
    pub token: Option<String>,
    /// Timestamp of the most recently seen message.
    pub ts: Option<f32>,
    /// Private channel to set reading cursor in.
    pub channel: Option<String>
}

/// struct for passing parameters to the method `open`
#[derive(Clone, Debug)]
pub struct OpenParams {
    /// Authentication token. Requires scope: `groups:write`
    pub token: Option<String>,
    /// Private channel to open.
    pub channel: Option<String>
}

/// struct for passing parameters to the method `rename`
#[derive(Clone, Debug)]
pub struct RenameParams {
    /// Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.
    pub validate: Option<bool>,
    /// Authentication token. Requires scope: `groups:write`
    pub token: Option<String>,
    /// New name for private channel.
    pub name: Option<String>,
    /// Private channel to rename
    pub channel: Option<String>
}

/// struct for passing parameters to the method `replies`
#[derive(Clone, Debug)]
pub struct RepliesParams {
    /// Unique identifier of a thread's parent message
    pub thread_ts: Option<f32>,
    /// Authentication token. Requires scope: `groups:history`
    pub token: Option<String>,
    /// Private channel to fetch thread from
    pub channel: Option<String>
}

/// struct for passing parameters to the method `set_purpose`
#[derive(Clone, Debug)]
pub struct SetPurposeParams {
    /// Authentication token. Requires scope: `groups:write`
    pub token: Option<String>,
    /// The new purpose
    pub purpose: Option<String>,
    /// Private channel to set the purpose of
    pub channel: Option<String>
}

/// struct for passing parameters to the method `set_topic`
#[derive(Clone, Debug)]
pub struct SetTopicParams {
    /// The new topic
    pub topic: Option<String>,
    /// Authentication token. Requires scope: `groups:write`
    pub token: Option<String>,
    /// Private channel to set the topic of
    pub channel: Option<String>
}

/// struct for passing parameters to the method `unarchive`
#[derive(Clone, Debug)]
pub struct UnarchiveParams {
    /// Authentication token. Requires scope: `groups:write`
    pub token: Option<String>,
    /// Private channel to unarchive
    pub channel: Option<String>
}


/// struct for typed errors of method `archive`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArchiveError {
    DefaultResponse(crate::models::GroupsArchiveErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateError {
    DefaultResponse(crate::models::GroupsCreateErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_child`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateChildError {
    DefaultResponse(crate::models::GroupsCreateChildErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `history`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HistoryError {
    DefaultResponse(crate::models::GroupsHistoryErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `info`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InfoError {
    DefaultResponse(crate::models::GroupsInfoErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `invite`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InviteError {
    DefaultResponse(crate::models::GroupsInviteErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `kick`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum KickError {
    DefaultResponse(crate::models::GroupsKickErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `leave`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LeaveError {
    DefaultResponse(crate::models::GroupsLeaveErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListError {
    DefaultResponse(crate::models::GroupsListErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `mark`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MarkError {
    DefaultResponse(crate::models::GroupsMarkErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `open`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OpenError {
    DefaultResponse(crate::models::GroupsOpenErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `rename`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RenameError {
    DefaultResponse(crate::models::GroupsRenameErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replies`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RepliesError {
    DefaultResponse(crate::models::GroupsRepliesErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_purpose`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetPurposeError {
    DefaultResponse(crate::models::GroupsSetPurposeErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_topic`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetTopicError {
    DefaultResponse(crate::models::GroupsSetTopicErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `unarchive`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UnarchiveError {
    DefaultResponse(crate::models::GroupsUnarchiveErrorSchema),
    UnknownValue(serde_json::Value),
}


/// Archives a private channel.
pub async fn archive(configuration: &configuration::Configuration, params: ArchiveParams) -> Result<crate::models::GroupsArchiveSchema, Error<ArchiveError>> {
    // unbox the parameters
    let token = params.token;
    let channel = params.channel;


    let client = &configuration.client;

    let uri_str = format!("{}/groups.archive", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    if let Some(param_value) = token {
        form_params.insert("token", param_value.to_string());
    }
    if let Some(param_value) = channel {
        form_params.insert("channel", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::GroupsArchiveSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<ArchiveError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Creates a private channel.
pub async fn create(configuration: &configuration::Configuration, params: CreateParams) -> Result<crate::models::GroupsCreateSuccessSchema, Error<CreateError>> {
    // unbox the parameters
    let validate = params.validate;
    let token = params.token;
    let name = params.name;


    let client = &configuration.client;

    let uri_str = format!("{}/groups.create", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    if let Some(param_value) = validate {
        form_params.insert("validate", param_value.to_string());
    }
    if let Some(param_value) = token {
        form_params.insert("token", param_value.to_string());
    }
    if let Some(param_value) = name {
        form_params.insert("name", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::GroupsCreateSuccessSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<CreateError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Clones and archives a private channel.
pub async fn create_child(configuration: &configuration::Configuration, params: CreateChildParams) -> Result<crate::models::GroupsCreateChildSchema, Error<CreateChildError>> {
    // unbox the parameters
    let token = params.token;
    let channel = params.channel;


    let client = &configuration.client;

    let uri_str = format!("{}/groups.createChild", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    if let Some(param_value) = token {
        form_params.insert("token", param_value.to_string());
    }
    if let Some(param_value) = channel {
        form_params.insert("channel", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::GroupsCreateChildSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<CreateChildError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Fetches history of messages and events from a private channel.
pub async fn history(configuration: &configuration::Configuration, params: HistoryParams) -> Result<crate::models::GroupsHistorySuccessSchema, Error<HistoryError>> {
    // unbox the parameters
    let count = params.count;
    let unreads = params.unreads;
    let inclusive = params.inclusive;
    let token = params.token;
    let oldest = params.oldest;
    let channel = params.channel;
    let latest = params.latest;


    let client = &configuration.client;

    let uri_str = format!("{}/groups.history", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = count {
        req_builder = req_builder.query(&[("count", &s.to_string())]);
    }
    if let Some(ref s) = unreads {
        req_builder = req_builder.query(&[("unreads", &s.to_string())]);
    }
    if let Some(ref s) = inclusive {
        req_builder = req_builder.query(&[("inclusive", &s.to_string())]);
    }
    if let Some(ref s) = token {
        req_builder = req_builder.query(&[("token", &s.to_string())]);
    }
    if let Some(ref s) = oldest {
        req_builder = req_builder.query(&[("oldest", &s.to_string())]);
    }
    if let Some(ref s) = channel {
        req_builder = req_builder.query(&[("channel", &s.to_string())]);
    }
    if let Some(ref s) = latest {
        req_builder = req_builder.query(&[("latest", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::GroupsHistorySuccessSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<HistoryError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Gets information about a private channel.
pub async fn info(configuration: &configuration::Configuration, params: InfoParams) -> Result<crate::models::GroupsInfoSuccessSchema, Error<InfoError>> {
    // unbox the parameters
    let token = params.token;
    let include_locale = params.include_locale;
    let channel = params.channel;


    let client = &configuration.client;

    let uri_str = format!("{}/groups.info", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = token {
        req_builder = req_builder.query(&[("token", &s.to_string())]);
    }
    if let Some(ref s) = include_locale {
        req_builder = req_builder.query(&[("include_locale", &s.to_string())]);
    }
    if let Some(ref s) = channel {
        req_builder = req_builder.query(&[("channel", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::GroupsInfoSuccessSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<InfoError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Invites a user to a private channel.
pub async fn invite(configuration: &configuration::Configuration, params: InviteParams) -> Result<crate::models::GroupsInviteSuccessSchema, Error<InviteError>> {
    // unbox the parameters
    let token = params.token;
    let user = params.user;
    let channel = params.channel;


    let client = &configuration.client;

    let uri_str = format!("{}/groups.invite", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    if let Some(param_value) = token {
        form_params.insert("token", param_value.to_string());
    }
    if let Some(param_value) = user {
        form_params.insert("user", param_value.to_string());
    }
    if let Some(param_value) = channel {
        form_params.insert("channel", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::GroupsInviteSuccessSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<InviteError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Removes a user from a private channel.
pub async fn kick(configuration: &configuration::Configuration, params: KickParams) -> Result<crate::models::GroupsKickSchema, Error<KickError>> {
    // unbox the parameters
    let token = params.token;
    let user = params.user;
    let channel = params.channel;


    let client = &configuration.client;

    let uri_str = format!("{}/groups.kick", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("token", token.to_string());
    form_params.insert("user", user.to_string());
    form_params.insert("channel", channel.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::GroupsKickSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<KickError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Leaves a private channel.
pub async fn leave(configuration: &configuration::Configuration, params: LeaveParams) -> Result<crate::models::GroupsLeaveSchema, Error<LeaveError>> {
    // unbox the parameters
    let token = params.token;
    let channel = params.channel;


    let client = &configuration.client;

    let uri_str = format!("{}/groups.leave", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("token", token.to_string());
    form_params.insert("channel", channel.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::GroupsLeaveSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<LeaveError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Lists private channels that the calling user has access to.
pub async fn list(configuration: &configuration::Configuration, params: ListParams) -> Result<crate::models::GroupsListSuccessSchema, Error<ListError>> {
    // unbox the parameters
    let exclude_members = params.exclude_members;
    let cursor = params.cursor;
    let token = params.token;
    let limit = params.limit;
    let exclude_archived = params.exclude_archived;


    let client = &configuration.client;

    let uri_str = format!("{}/groups.list", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = exclude_members {
        req_builder = req_builder.query(&[("exclude_members", &s.to_string())]);
    }
    if let Some(ref s) = cursor {
        req_builder = req_builder.query(&[("cursor", &s.to_string())]);
    }
    if let Some(ref s) = token {
        req_builder = req_builder.query(&[("token", &s.to_string())]);
    }
    if let Some(ref s) = limit {
        req_builder = req_builder.query(&[("limit", &s.to_string())]);
    }
    if let Some(ref s) = exclude_archived {
        req_builder = req_builder.query(&[("exclude_archived", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::GroupsListSuccessSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<ListError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Sets the read cursor in a private channel.
pub async fn mark(configuration: &configuration::Configuration, params: MarkParams) -> Result<crate::models::GroupsMarkSuccessSchema, Error<MarkError>> {
    // unbox the parameters
    let token = params.token;
    let ts = params.ts;
    let channel = params.channel;


    let client = &configuration.client;

    let uri_str = format!("{}/groups.mark", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    if let Some(param_value) = token {
        form_params.insert("token", param_value.to_string());
    }
    if let Some(param_value) = ts {
        form_params.insert("ts", param_value.to_string());
    }
    if let Some(param_value) = channel {
        form_params.insert("channel", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::GroupsMarkSuccessSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<MarkError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Opens a private channel.
pub async fn open(configuration: &configuration::Configuration, params: OpenParams) -> Result<crate::models::GroupsOpenSchema, Error<OpenError>> {
    // unbox the parameters
    let token = params.token;
    let channel = params.channel;


    let client = &configuration.client;

    let uri_str = format!("{}/groups.open", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    if let Some(param_value) = token {
        form_params.insert("token", param_value.to_string());
    }
    if let Some(param_value) = channel {
        form_params.insert("channel", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::GroupsOpenSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<OpenError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Renames a private channel.
pub async fn rename(configuration: &configuration::Configuration, params: RenameParams) -> Result<crate::models::GroupsRenameSchema, Error<RenameError>> {
    // unbox the parameters
    let validate = params.validate;
    let token = params.token;
    let name = params.name;
    let channel = params.channel;


    let client = &configuration.client;

    let uri_str = format!("{}/groups.rename", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    if let Some(param_value) = validate {
        form_params.insert("validate", param_value.to_string());
    }
    if let Some(param_value) = token {
        form_params.insert("token", param_value.to_string());
    }
    if let Some(param_value) = name {
        form_params.insert("name", param_value.to_string());
    }
    if let Some(param_value) = channel {
        form_params.insert("channel", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::GroupsRenameSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<RenameError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Retrieve a thread of messages posted to a private channel
pub async fn replies(configuration: &configuration::Configuration, params: RepliesParams) -> Result<crate::models::GroupsRepliesSchema, Error<RepliesError>> {
    // unbox the parameters
    let thread_ts = params.thread_ts;
    let token = params.token;
    let channel = params.channel;


    let client = &configuration.client;

    let uri_str = format!("{}/groups.replies", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = thread_ts {
        req_builder = req_builder.query(&[("thread_ts", &s.to_string())]);
    }
    if let Some(ref s) = token {
        req_builder = req_builder.query(&[("token", &s.to_string())]);
    }
    if let Some(ref s) = channel {
        req_builder = req_builder.query(&[("channel", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::GroupsRepliesSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<RepliesError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Sets the purpose for a private channel.
pub async fn set_purpose(configuration: &configuration::Configuration, params: SetPurposeParams) -> Result<crate::models::GroupsSetPurposeSchema, Error<SetPurposeError>> {
    // unbox the parameters
    let token = params.token;
    let purpose = params.purpose;
    let channel = params.channel;


    let client = &configuration.client;

    let uri_str = format!("{}/groups.setPurpose", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    if let Some(param_value) = token {
        form_params.insert("token", param_value.to_string());
    }
    if let Some(param_value) = purpose {
        form_params.insert("purpose", param_value.to_string());
    }
    if let Some(param_value) = channel {
        form_params.insert("channel", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::GroupsSetPurposeSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<SetPurposeError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Sets the topic for a private channel.
pub async fn set_topic(configuration: &configuration::Configuration, params: SetTopicParams) -> Result<crate::models::GroupsSetTopicSchema, Error<SetTopicError>> {
    // unbox the parameters
    let topic = params.topic;
    let token = params.token;
    let channel = params.channel;


    let client = &configuration.client;

    let uri_str = format!("{}/groups.setTopic", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    if let Some(param_value) = topic {
        form_params.insert("topic", param_value.to_string());
    }
    if let Some(param_value) = token {
        form_params.insert("token", param_value.to_string());
    }
    if let Some(param_value) = channel {
        form_params.insert("channel", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::GroupsSetTopicSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<SetTopicError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Unarchives a private channel.
pub async fn unarchive(configuration: &configuration::Configuration, params: UnarchiveParams) -> Result<crate::models::GroupsUnarchiveSchema, Error<UnarchiveError>> {
    // unbox the parameters
    let token = params.token;
    let channel = params.channel;


    let client = &configuration.client;

    let uri_str = format!("{}/groups.unarchive", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    if let Some(param_value) = token {
        form_params.insert("token", param_value.to_string());
    }
    if let Some(param_value) = channel {
        form_params.insert("channel", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::GroupsUnarchiveSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<UnarchiveError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

