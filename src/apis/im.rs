/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `close`
#[derive(Clone, Debug)]
pub struct CloseParams {
    /// Authentication token. Requires scope: `im:write`
    pub token: String,
    /// Direct message channel to close.
    pub channel: String
}

/// struct for passing parameters to the method `history`
#[derive(Clone, Debug)]
pub struct HistoryParams {
    /// Number of messages to return, between 1 and 1000.
    pub count: Option<i32>,
    /// Include `unread_count_display` in the output?
    pub unreads: Option<bool>,
    /// Include messages with latest or oldest timestamp in results.
    pub inclusive: Option<bool>,
    /// Authentication token. Requires scope: `im:history`
    pub token: Option<String>,
    /// Start of time range of messages to include in results.
    pub oldest: Option<f32>,
    /// Direct message channel to fetch history for.
    pub channel: Option<String>,
    /// End of time range of messages to include in results.
    pub latest: Option<f32>
}

/// struct for passing parameters to the method `list`
#[derive(Clone, Debug)]
pub struct ListParams {
    /// Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.
    pub cursor: Option<String>,
    /// Authentication token. Requires scope: `im:read`
    pub token: Option<String>,
    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.
    pub limit: Option<i32>
}

/// struct for passing parameters to the method `mark`
#[derive(Clone, Debug)]
pub struct MarkParams {
    /// Authentication token. Requires scope: `im:write`
    pub token: String,
    /// Direct message channel to set reading cursor in.
    pub channel: String,
    /// Timestamp of the most recently seen message.
    pub ts: String
}

/// struct for passing parameters to the method `open`
#[derive(Clone, Debug)]
pub struct OpenParams {
    /// Authentication token. Requires scope: `im:write`
    pub token: Option<String>,
    /// Boolean, indicates you want the full IM channel definition in the response.
    pub return_im: Option<bool>,
    /// User to open a direct message channel with.
    pub user: Option<String>,
    /// Set this to `true` to receive the locale for this im. Defaults to `false`
    pub include_locale: Option<bool>
}

/// struct for passing parameters to the method `replies`
#[derive(Clone, Debug)]
pub struct RepliesParams {
    /// Unique identifier of a thread's parent message
    pub thread_ts: Option<f32>,
    /// Authentication token. Requires scope: `im:history`
    pub token: Option<String>,
    /// Direct message channel to fetch thread from
    pub channel: Option<String>
}


/// struct for typed errors of method `close`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CloseError {
    DefaultResponse(crate::models::ImCloseErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `history`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HistoryError {
    DefaultResponse(crate::models::ImHistoryErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListError {
    DefaultResponse(crate::models::ImListErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `mark`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MarkError {
    DefaultResponse(crate::models::ImMarkErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `open`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OpenError {
    DefaultResponse(crate::models::ImOpenErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replies`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RepliesError {
    DefaultResponse(crate::models::ImRepliesErrorSchema),
    UnknownValue(serde_json::Value),
}


/// Close a direct message channel.
pub async fn close(configuration: &configuration::Configuration, params: CloseParams) -> Result<crate::models::ImCloseSchema, Error<CloseError>> {
    // unbox the parameters
    let token = params.token;
    let channel = params.channel;


    let client = &configuration.client;

    let uri_str = format!("{}/im.close", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("token", token.to_string());
    form_params.insert("channel", channel.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::ImCloseSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<CloseError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Fetches history of messages and events from direct message channel.
pub async fn history(configuration: &configuration::Configuration, params: HistoryParams) -> Result<crate::models::ImHistorySuccessSchema, Error<HistoryError>> {
    // unbox the parameters
    let count = params.count;
    let unreads = params.unreads;
    let inclusive = params.inclusive;
    let token = params.token;
    let oldest = params.oldest;
    let channel = params.channel;
    let latest = params.latest;


    let client = &configuration.client;

    let uri_str = format!("{}/im.history", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = count {
        req_builder = req_builder.query(&[("count", &s.to_string())]);
    }
    if let Some(ref s) = unreads {
        req_builder = req_builder.query(&[("unreads", &s.to_string())]);
    }
    if let Some(ref s) = inclusive {
        req_builder = req_builder.query(&[("inclusive", &s.to_string())]);
    }
    if let Some(ref s) = token {
        req_builder = req_builder.query(&[("token", &s.to_string())]);
    }
    if let Some(ref s) = oldest {
        req_builder = req_builder.query(&[("oldest", &s.to_string())]);
    }
    if let Some(ref s) = channel {
        req_builder = req_builder.query(&[("channel", &s.to_string())]);
    }
    if let Some(ref s) = latest {
        req_builder = req_builder.query(&[("latest", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::ImHistorySuccessSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<HistoryError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Lists direct message channels for the calling user.
pub async fn list(configuration: &configuration::Configuration, params: ListParams) -> Result<crate::models::ImListSuccessSchema, Error<ListError>> {
    // unbox the parameters
    let cursor = params.cursor;
    let token = params.token;
    let limit = params.limit;


    let client = &configuration.client;

    let uri_str = format!("{}/im.list", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = cursor {
        req_builder = req_builder.query(&[("cursor", &s.to_string())]);
    }
    if let Some(ref s) = token {
        req_builder = req_builder.query(&[("token", &s.to_string())]);
    }
    if let Some(ref s) = limit {
        req_builder = req_builder.query(&[("limit", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::ImListSuccessSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<ListError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Sets the read cursor in a direct message channel.
pub async fn mark(configuration: &configuration::Configuration, params: MarkParams) -> Result<crate::models::ImMarkSuccessSchema, Error<MarkError>> {
    // unbox the parameters
    let token = params.token;
    let channel = params.channel;
    let ts = params.ts;


    let client = &configuration.client;

    let uri_str = format!("{}/im.mark", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("token", token.to_string());
    form_params.insert("channel", channel.to_string());
    form_params.insert("ts", ts.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::ImMarkSuccessSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<MarkError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Opens a direct message channel.
pub async fn open(configuration: &configuration::Configuration, params: OpenParams) -> Result<crate::models::ImOpenSuccessSchema, Error<OpenError>> {
    // unbox the parameters
    let token = params.token;
    let return_im = params.return_im;
    let user = params.user;
    let include_locale = params.include_locale;


    let client = &configuration.client;

    let uri_str = format!("{}/im.open", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    if let Some(param_value) = token {
        form_params.insert("token", param_value.to_string());
    }
    if let Some(param_value) = return_im {
        form_params.insert("return_im", param_value.to_string());
    }
    if let Some(param_value) = user {
        form_params.insert("user", param_value.to_string());
    }
    if let Some(param_value) = include_locale {
        form_params.insert("include_locale", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::ImOpenSuccessSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<OpenError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Retrieve a thread of messages posted to a direct message conversation
pub async fn replies(configuration: &configuration::Configuration, params: RepliesParams) -> Result<crate::models::ImRepliesSchema, Error<RepliesError>> {
    // unbox the parameters
    let thread_ts = params.thread_ts;
    let token = params.token;
    let channel = params.channel;


    let client = &configuration.client;

    let uri_str = format!("{}/im.replies", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = thread_ts {
        req_builder = req_builder.query(&[("thread_ts", &s.to_string())]);
    }
    if let Some(ref s) = token {
        req_builder = req_builder.query(&[("token", &s.to_string())]);
    }
    if let Some(ref s) = channel {
        req_builder = req_builder.query(&[("channel", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::ImRepliesSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<RepliesError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

