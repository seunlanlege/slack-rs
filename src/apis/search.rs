/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `messages`
#[derive(Clone, Debug)]
pub struct MessagesParams {
    /// Search query.
    pub query: String,
    /// Authentication token. Requires scope: `search:read`
    pub token: String,
    /// Change sort direction to ascending (`asc`) or descending (`desc`).
    pub sort_dir: Option<String>,
    /// Return matches sorted by either `score` or `timestamp`.
    pub sort: Option<String>,
    /// Pass the number of results you want per \"page\". Maximum of `100`.
    pub count: Option<i32>,
    /// Pass a value of `true` to enable query highlight markers (see below).
    pub highlight: Option<bool>,
    pub page: Option<i32>
}


/// struct for typed errors of method `messages`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MessagesError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}


/// Searches for messages matching a query.
pub async fn messages(configuration: &configuration::Configuration, params: MessagesParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<MessagesError>> {
    // unbox the parameters
    let query = params.query;
    let token = params.token;
    let sort_dir = params.sort_dir;
    let sort = params.sort;
    let count = params.count;
    let highlight = params.highlight;
    let page = params.page;


    let client = &configuration.client;

    let uri_str = format!("{}/search.messages", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = sort_dir {
        req_builder = req_builder.query(&[("sort_dir", &s.to_string())]);
    }
    req_builder = req_builder.query(&[("query", &query.to_string())]);
    if let Some(ref s) = sort {
        req_builder = req_builder.query(&[("sort", &s.to_string())]);
    }
    if let Some(ref s) = count {
        req_builder = req_builder.query(&[("count", &s.to_string())]);
    }
    req_builder = req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref s) = highlight {
        req_builder = req_builder.query(&[("highlight", &s.to_string())]);
    }
    if let Some(ref s) = page {
        req_builder = req_builder.query(&[("page", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<MessagesError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

