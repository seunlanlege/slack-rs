/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::rc::Rc;

use std::option::Option;

use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `create`
#[derive(Clone, Debug)]
pub struct CreateParams {
    /// Authentication token. Requires scope: `usergroups:write`
    pub token: String,
    /// A name for the User Group. Must be unique among User Groups.
    pub name: String,
    /// A mention handle. Must be unique among channels, users and User Groups.
    pub handle: Option<String>,
    /// A short description of the User Group.
    pub description: Option<String>,
    /// A comma separated string of encoded channel IDs for which the User Group uses as a default.
    pub channels: Option<String>,
    /// Include the number of users in each User Group.
    pub include_count: Option<bool>
}

/// struct for passing parameters to the method `disable`
#[derive(Clone, Debug)]
pub struct DisableParams {
    /// Authentication token. Requires scope: `usergroups:write`
    pub token: String,
    /// The encoded ID of the User Group to disable.
    pub usergroup: String,
    /// Include the number of users in the User Group.
    pub include_count: Option<bool>
}

/// struct for passing parameters to the method `enable`
#[derive(Clone, Debug)]
pub struct EnableParams {
    /// Authentication token. Requires scope: `usergroups:write`
    pub token: String,
    /// The encoded ID of the User Group to enable.
    pub usergroup: String,
    /// Include the number of users in the User Group.
    pub include_count: Option<bool>
}

/// struct for passing parameters to the method `list`
#[derive(Clone, Debug)]
pub struct ListParams {
    /// Authentication token. Requires scope: `usergroups:read`
    pub token: String,
    /// Include the list of users for each User Group.
    pub include_users: Option<bool>,
    /// Include the number of users in each User Group.
    pub include_count: Option<bool>,
    /// Include disabled User Groups.
    pub include_disabled: Option<bool>
}

/// struct for passing parameters to the method `update`
#[derive(Clone, Debug)]
pub struct UpdateParams {
    /// Authentication token. Requires scope: `usergroups:write`
    pub token: String,
    /// The encoded ID of the User Group to update.
    pub usergroup: String,
    /// A mention handle. Must be unique among channels, users and User Groups.
    pub handle: Option<String>,
    /// A short description of the User Group.
    pub description: Option<String>,
    /// A comma separated string of encoded channel IDs for which the User Group uses as a default.
    pub channels: Option<String>,
    /// Include the number of users in the User Group.
    pub include_count: Option<bool>,
    /// A name for the User Group. Must be unique among User Groups.
    pub name: Option<String>
}

/// struct for passing parameters to the method `users_list`
#[derive(Clone, Debug)]
pub struct UsersListParams {
    /// Authentication token. Requires scope: `usergroups:read`
    pub token: String,
    /// The encoded ID of the User Group to update.
    pub usergroup: String,
    /// Allow results that involve disabled User Groups.
    pub include_disabled: Option<bool>
}

/// struct for passing parameters to the method `users_update`
#[derive(Clone, Debug)]
pub struct UsersUpdateParams {
    /// Authentication token. Requires scope: `usergroups:write`
    pub token: String,
    /// A comma separated string of encoded user IDs that represent the entire list of users for the User Group.
    pub users: String,
    /// The encoded ID of the User Group to update.
    pub usergroup: String,
    /// Include the number of users in the User Group.
    pub include_count: Option<bool>
}


/// struct for typed errors of method `create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateError {
    DefaultResponse(crate::models::UsergroupsCreateErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `disable`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DisableError {
    DefaultResponse(crate::models::UsergroupsDisableErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `enable`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EnableError {
    DefaultResponse(crate::models::UsergroupsEnableErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListError {
    DefaultResponse(crate::models::UsergroupsListErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateError {
    DefaultResponse(crate::models::UsergroupsUpdateErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersListError {
    DefaultResponse(crate::models::UsergroupsUsersListErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `users_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UsersUpdateError {
    DefaultResponse(crate::models::UsergroupsUsersUpdateErrorSchema),
    UnknownValue(serde_json::Value),
}


    pub async fn create(configuration: &configuration::Configuration, params: CreateParams) -> Result<crate::models::UsergroupsCreateSchema, Error<CreateError>> {
        // unbox the parameters
        let token = params.token;
        let name = params.name;
        let handle = params.handle;
        let description = params.description;
        let channels = params.channels;
        let include_count = params.include_count;

        let client = &configuration.client;

        let uri_str = format!("{}/usergroups.create", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("token", token.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = handle {
            form_params.insert("handle", param_value.to_string());
        }
        if let Some(param_value) = description {
            form_params.insert("description", param_value.to_string());
        }
        if let Some(param_value) = channels {
            form_params.insert("channels", param_value.to_string());
        }
        if let Some(param_value) = include_count {
            form_params.insert("include_count", param_value.to_string());
        }
        form_params.insert("name", name.to_string());
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<CreateError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn disable(configuration: &configuration::Configuration, params: DisableParams) -> Result<crate::models::UsergroupsDisableSchema, Error<DisableError>> {
        // unbox the parameters
        let token = params.token;
        let usergroup = params.usergroup;
        let include_count = params.include_count;

        let client = &configuration.client;

        let uri_str = format!("{}/usergroups.disable", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("token", token.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = include_count {
            form_params.insert("include_count", param_value.to_string());
        }
        form_params.insert("usergroup", usergroup.to_string());
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<DisableError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn enable(configuration: &configuration::Configuration, params: EnableParams) -> Result<crate::models::UsergroupsEnableSchema, Error<EnableError>> {
        // unbox the parameters
        let token = params.token;
        let usergroup = params.usergroup;
        let include_count = params.include_count;

        let client = &configuration.client;

        let uri_str = format!("{}/usergroups.enable", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("token", token.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = include_count {
            form_params.insert("include_count", param_value.to_string());
        }
        form_params.insert("usergroup", usergroup.to_string());
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<EnableError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn list(configuration: &configuration::Configuration, params: ListParams) -> Result<crate::models::UsergroupsListSchema, Error<ListError>> {
        // unbox the parameters
        let token = params.token;
        let include_users = params.include_users;
        let include_count = params.include_count;
        let include_disabled = params.include_disabled;

        let client = &configuration.client;

        let uri_str = format!("{}/usergroups.list", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = include_users {
            req_builder = req_builder.query(&[("include_users", &s.to_string())]);
        }
        req_builder = req_builder.query(&[("token", &token.to_string())]);
        if let Some(ref s) = include_count {
            req_builder = req_builder.query(&[("include_count", &s.to_string())]);
        }
        if let Some(ref s) = include_disabled {
            req_builder = req_builder.query(&[("include_disabled", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ListError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn update(configuration: &configuration::Configuration, params: UpdateParams) -> Result<crate::models::UsergroupsUpdateSchema, Error<UpdateError>> {
        // unbox the parameters
        let token = params.token;
        let usergroup = params.usergroup;
        let handle = params.handle;
        let description = params.description;
        let channels = params.channels;
        let include_count = params.include_count;
        let name = params.name;

        let client = &configuration.client;

        let uri_str = format!("{}/usergroups.update", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("token", token.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = handle {
            form_params.insert("handle", param_value.to_string());
        }
        if let Some(param_value) = description {
            form_params.insert("description", param_value.to_string());
        }
        if let Some(param_value) = channels {
            form_params.insert("channels", param_value.to_string());
        }
        if let Some(param_value) = include_count {
            form_params.insert("include_count", param_value.to_string());
        }
        form_params.insert("usergroup", usergroup.to_string());
        if let Some(param_value) = name {
            form_params.insert("name", param_value.to_string());
        }
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<UpdateError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn users_list(configuration: &configuration::Configuration, params: UsersListParams) -> Result<crate::models::UsergroupsUsersListSchema, Error<UsersListError>> {
        // unbox the parameters
        let token = params.token;
        let usergroup = params.usergroup;
        let include_disabled = params.include_disabled;

        let client = &configuration.client;

        let uri_str = format!("{}/usergroups.users.list", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("token", &token.to_string())]);
        if let Some(ref s) = include_disabled {
            req_builder = req_builder.query(&[("include_disabled", &s.to_string())]);
        }
        req_builder = req_builder.query(&[("usergroup", &usergroup.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<UsersListError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn users_update(configuration: &configuration::Configuration, params: UsersUpdateParams) -> Result<crate::models::UsergroupsUsersUpdateSchema, Error<UsersUpdateError>> {
        // unbox the parameters
        let token = params.token;
        let users = params.users;
        let usergroup = params.usergroup;
        let include_count = params.include_count;

        let client = &configuration.client;

        let uri_str = format!("{}/usergroups.users.update", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("token", token.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        form_params.insert("users", users.to_string());
        if let Some(param_value) = include_count {
            form_params.insert("include_count", param_value.to_string());
        }
        form_params.insert("usergroup", usergroup.to_string());
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<UsersUpdateError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

