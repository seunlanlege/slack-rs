/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::rc::Rc;

use std::option::Option;

use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `close`
#[derive(Clone, Debug)]
pub struct CloseParams {
    /// Authentication token. Requires scope: `mpim:write`
    pub token: String,
    /// MPIM to close.
    pub channel: String
}

/// struct for passing parameters to the method `history`
#[derive(Clone, Debug)]
pub struct HistoryParams {
    /// Number of messages to return, between 1 and 1000.
    pub count: Option<i32>,
    /// Include `unread_count_display` in the output?
    pub unreads: Option<bool>,
    /// Include messages with latest or oldest timestamp in results.
    pub inclusive: Option<bool>,
    /// Authentication token. Requires scope: `mpim:history`
    pub token: Option<String>,
    /// Start of time range of messages to include in results.
    pub oldest: Option<f32>,
    /// Multiparty direct message to fetch history for.
    pub channel: Option<String>,
    /// End of time range of messages to include in results.
    pub latest: Option<f32>
}

/// struct for passing parameters to the method `list`
#[derive(Clone, Debug)]
pub struct ListParams {
    /// Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.
    pub cursor: Option<String>,
    /// Authentication token. Requires scope: `mpim:read`
    pub token: Option<String>,
    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
    pub limit: Option<i32>
}

/// struct for passing parameters to the method `mark`
#[derive(Clone, Debug)]
pub struct MarkParams {
    /// Authentication token. Requires scope: `mpim:write`
    pub token: Option<String>,
    /// Timestamp of the most recently seen message.
    pub ts: Option<f32>,
    /// multiparty direct message channel to set reading cursor in.
    pub channel: Option<String>
}

/// struct for passing parameters to the method `open`
#[derive(Clone, Debug)]
pub struct OpenParams {
    /// Authentication token. Requires scope: `mpim:write`
    pub token: Option<String>,
    /// Comma separated lists of users.  The ordering of the users is preserved whenever a MPIM group is returned.
    pub users: Option<String>
}

/// struct for passing parameters to the method `replies`
#[derive(Clone, Debug)]
pub struct RepliesParams {
    /// Unique identifier of a thread's parent message.
    pub thread_ts: Option<f32>,
    /// Authentication token. Requires scope: `mpim:history`
    pub token: Option<String>,
    /// Multiparty direct message channel to fetch thread from.
    pub channel: Option<String>
}


/// struct for typed errors of method `close`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CloseError {
    DefaultResponse(crate::models::MpimCloseErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `history`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HistoryError {
    DefaultResponse(crate::models::MpimHistoryErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListError {
    DefaultResponse(crate::models::MpimListErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `mark`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MarkError {
    DefaultResponse(crate::models::MpimMarkErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `open`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OpenError {
    DefaultResponse(crate::models::MpimOpenErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replies`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RepliesError {
    DefaultResponse(crate::models::MpimRepliesErrorSchema),
    UnknownValue(serde_json::Value),
}


    pub async fn close(configuration: &configuration::Configuration, params: CloseParams) -> Result<crate::models::MpimCloseSchema, Error<CloseError>> {
        // unbox the parameters
        let token = params.token;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/mpim.close", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("token", token.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        form_params.insert("channel", channel.to_string());
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<CloseError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn history(configuration: &configuration::Configuration, params: HistoryParams) -> Result<crate::models::MpimHistorySchema, Error<HistoryError>> {
        // unbox the parameters
        let count = params.count;
        let unreads = params.unreads;
        let inclusive = params.inclusive;
        let token = params.token;
        let oldest = params.oldest;
        let channel = params.channel;
        let latest = params.latest;

        let client = &configuration.client;

        let uri_str = format!("{}/mpim.history", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = count {
            req_builder = req_builder.query(&[("count", &s.to_string())]);
        }
        if let Some(ref s) = unreads {
            req_builder = req_builder.query(&[("unreads", &s.to_string())]);
        }
        if let Some(ref s) = inclusive {
            req_builder = req_builder.query(&[("inclusive", &s.to_string())]);
        }
        if let Some(ref s) = token {
            req_builder = req_builder.query(&[("token", &s.to_string())]);
        }
        if let Some(ref s) = oldest {
            req_builder = req_builder.query(&[("oldest", &s.to_string())]);
        }
        if let Some(ref s) = channel {
            req_builder = req_builder.query(&[("channel", &s.to_string())]);
        }
        if let Some(ref s) = latest {
            req_builder = req_builder.query(&[("latest", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<HistoryError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn list(configuration: &configuration::Configuration, params: ListParams) -> Result<crate::models::MpimListSchema, Error<ListError>> {
        // unbox the parameters
        let cursor = params.cursor;
        let token = params.token;
        let limit = params.limit;

        let client = &configuration.client;

        let uri_str = format!("{}/mpim.list", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = cursor {
            req_builder = req_builder.query(&[("cursor", &s.to_string())]);
        }
        if let Some(ref s) = token {
            req_builder = req_builder.query(&[("token", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ListError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn mark(configuration: &configuration::Configuration, params: MarkParams) -> Result<crate::models::MpimMarkSchema, Error<MarkError>> {
        // unbox the parameters
        let token = params.token;
        let ts = params.ts;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/mpim.mark", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(param_value) = token {
            req_builder = req_builder.header("token", param_value.to_string());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = ts {
            form_params.insert("ts", param_value.to_string());
        }
        if let Some(param_value) = channel {
            form_params.insert("channel", param_value.to_string());
        }
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<MarkError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn open(configuration: &configuration::Configuration, params: OpenParams) -> Result<crate::models::MpimOpenSuccessSchema, Error<OpenError>> {
        // unbox the parameters
        let token = params.token;
        let users = params.users;

        let client = &configuration.client;

        let uri_str = format!("{}/mpim.open", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(param_value) = token {
            req_builder = req_builder.header("token", param_value.to_string());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = users {
            form_params.insert("users", param_value.to_string());
        }
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<OpenError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn replies(configuration: &configuration::Configuration, params: RepliesParams) -> Result<crate::models::MpimRepliesSchema, Error<RepliesError>> {
        // unbox the parameters
        let thread_ts = params.thread_ts;
        let token = params.token;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/mpim.replies", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = thread_ts {
            req_builder = req_builder.query(&[("thread_ts", &s.to_string())]);
        }
        if let Some(ref s) = token {
            req_builder = req_builder.query(&[("token", &s.to_string())]);
        }
        if let Some(ref s) = channel {
            req_builder = req_builder.query(&[("channel", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<RepliesError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

