/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::rc::Rc;

use std::option::Option;

use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `archive`
#[derive(Clone, Debug)]
pub struct ArchiveParams {
    /// Authentication token. Requires scope: `channels:write`
    pub token: Option<String>,
    /// Channel to archive
    pub channel: Option<String>
}

/// struct for passing parameters to the method `create`
#[derive(Clone, Debug)]
pub struct CreateParams {
    /// Authentication token. Requires scope: `channels:write`
    pub token: Option<String>,
    /// Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.
    pub validate: Option<bool>,
    /// Name of channel to create
    pub name: Option<String>
}

/// struct for passing parameters to the method `history`
#[derive(Clone, Debug)]
pub struct HistoryParams {
    /// Number of messages to return, between 1 and 1000.
    pub count: Option<i32>,
    /// Include `unread_count_display` in the output?
    pub unreads: Option<bool>,
    /// Include messages with latest or oldest timestamp in results.
    pub inclusive: Option<bool>,
    /// Authentication token. Requires scope: `channels:history`
    pub token: Option<String>,
    /// Start of time range of messages to include in results.
    pub oldest: Option<f32>,
    /// Channel to fetch history for.
    pub channel: Option<String>,
    /// End of time range of messages to include in results.
    pub latest: Option<f32>
}

/// struct for passing parameters to the method `info`
#[derive(Clone, Debug)]
pub struct InfoParams {
    /// Authentication token. Requires scope: `channels:read`
    pub token: Option<String>,
    /// Set this to `true` to receive the locale for this channel. Defaults to `false`
    pub include_locale: Option<bool>,
    /// Channel to get info on
    pub channel: Option<String>
}

/// struct for passing parameters to the method `invite`
#[derive(Clone, Debug)]
pub struct InviteParams {
    /// Authentication token. Requires scope: `channels:write`
    pub token: Option<String>,
    /// User to invite to channel.
    pub user: Option<String>,
    /// Channel to invite user to.
    pub channel: Option<String>
}

/// struct for passing parameters to the method `join`
#[derive(Clone, Debug)]
pub struct JoinParams {
    /// Authentication token. Requires scope: `channels:write`
    pub token: Option<String>,
    /// Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.
    pub validate: Option<bool>,
    /// Name of channel to join
    pub name: Option<String>
}

/// struct for passing parameters to the method `kick`
#[derive(Clone, Debug)]
pub struct KickParams {
    /// Authentication token. Requires scope: `channels:write`
    pub token: Option<String>,
    /// User to remove from channel.
    pub user: Option<String>,
    /// Channel to remove user from.
    pub channel: Option<String>
}

/// struct for passing parameters to the method `leave`
#[derive(Clone, Debug)]
pub struct LeaveParams {
    /// Authentication token. Requires scope: `channels:write`
    pub token: Option<String>,
    /// Channel to leave
    pub channel: Option<String>
}

/// struct for passing parameters to the method `list`
#[derive(Clone, Debug)]
pub struct ListParams {
    /// Exclude the `members` collection from each `channel`
    pub exclude_members: Option<bool>,
    /// Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.
    pub cursor: Option<String>,
    /// Authentication token. Requires scope: `channels:read`
    pub token: Option<String>,
    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.
    pub limit: Option<i32>,
    /// Exclude archived channels from the list
    pub exclude_archived: Option<bool>
}

/// struct for passing parameters to the method `mark`
#[derive(Clone, Debug)]
pub struct MarkParams {
    /// Authentication token. Requires scope: `channels:write`
    pub token: Option<String>,
    /// Timestamp of the most recently seen message.
    pub ts: Option<f32>,
    /// Channel to set reading cursor in.
    pub channel: Option<String>
}

/// struct for passing parameters to the method `rename`
#[derive(Clone, Debug)]
pub struct RenameParams {
    /// Authentication token. Requires scope: `channels:write`
    pub token: Option<String>,
    /// Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.
    pub validate: Option<bool>,
    /// New name for channel.
    pub name: Option<String>,
    /// Channel to rename
    pub channel: Option<String>
}

/// struct for passing parameters to the method `replies`
#[derive(Clone, Debug)]
pub struct RepliesParams {
    /// Unique identifier of a thread's parent message
    pub thread_ts: Option<f32>,
    /// Authentication token. Requires scope: `channels:history`
    pub token: Option<String>,
    /// Channel to fetch thread from
    pub channel: Option<String>
}

/// struct for passing parameters to the method `set_purpose`
#[derive(Clone, Debug)]
pub struct SetPurposeParams {
    /// Authentication token. Requires scope: `channels:write`
    pub token: String,
    /// The new purpose
    pub purpose: String,
    /// Channel to set the purpose of
    pub channel: String,
    /// if it is true, treat this like a message and not an unescaped thing
    pub name_tagging: Option<bool>
}

/// struct for passing parameters to the method `set_topic`
#[derive(Clone, Debug)]
pub struct SetTopicParams {
    /// Authentication token. Requires scope: `channels:write`
    pub token: String,
    /// The new topic
    pub topic: String,
    /// Channel to set the topic of
    pub channel: String
}

/// struct for passing parameters to the method `unarchive`
#[derive(Clone, Debug)]
pub struct UnarchiveParams {
    /// Authentication token. Requires scope: `channels:write`
    pub token: String,
    /// Channel to unarchive
    pub channel: String
}


/// struct for typed errors of method `archive`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArchiveError {
    DefaultResponse(crate::models::ChannelsArchiveErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateError {
    DefaultResponse(crate::models::ChannelsCreateErrorSchema1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `history`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HistoryError {
    DefaultResponse(crate::models::ChannelsHistoryErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `info`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InfoError {
    DefaultResponse(crate::models::ChannelsInfoErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `invite`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InviteError {
    DefaultResponse(crate::models::ChannelsInviteErrorSchema1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `join`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum JoinError {
    DefaultResponse(crate::models::ChannelsJoinErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `kick`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum KickError {
    DefaultResponse(crate::models::ChannelsKickErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `leave`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LeaveError {
    DefaultResponse(crate::models::ChannelsLeaveErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListError {
    DefaultResponse(crate::models::ChannelsListErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `mark`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MarkError {
    DefaultResponse(crate::models::ChannelsMarkErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `rename`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RenameError {
    DefaultResponse(crate::models::ChannelsRenameErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replies`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RepliesError {
    DefaultResponse(crate::models::ChannelsRepliesErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_purpose`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetPurposeError {
    DefaultResponse(crate::models::ChannelsSetPurposeErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_topic`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetTopicError {
    DefaultResponse(crate::models::ChannelsSetTopicErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `unarchive`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UnarchiveError {
    DefaultResponse(crate::models::ChannelsUnarchiveErrorSchema),
    UnknownValue(serde_json::Value),
}


    pub async fn archive(configuration: &configuration::Configuration, params: ArchiveParams) -> Result<crate::models::ChannelsArchiveSuccessSchema, Error<ArchiveError>> {
        // unbox the parameters
        let token = params.token;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/channels.archive", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(param_value) = token {
            req_builder = req_builder.header("token", param_value.to_string());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = channel {
            form_params.insert("channel", param_value.to_string());
        }
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ArchiveError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn create(configuration: &configuration::Configuration, params: CreateParams) -> Result<crate::models::ChannelsCreateErrorSchema, Error<CreateError>> {
        // unbox the parameters
        let token = params.token;
        let validate = params.validate;
        let name = params.name;

        let client = &configuration.client;

        let uri_str = format!("{}/channels.create", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(param_value) = token {
            req_builder = req_builder.header("token", param_value.to_string());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = validate {
            form_params.insert("validate", param_value.to_string());
        }
        if let Some(param_value) = name {
            form_params.insert("name", param_value.to_string());
        }
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<CreateError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn history(configuration: &configuration::Configuration, params: HistoryParams) -> Result<crate::models::ChannelsHistorySuccessSchema, Error<HistoryError>> {
        // unbox the parameters
        let count = params.count;
        let unreads = params.unreads;
        let inclusive = params.inclusive;
        let token = params.token;
        let oldest = params.oldest;
        let channel = params.channel;
        let latest = params.latest;

        let client = &configuration.client;

        let uri_str = format!("{}/channels.history", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = count {
            req_builder = req_builder.query(&[("count", &s.to_string())]);
        }
        if let Some(ref s) = unreads {
            req_builder = req_builder.query(&[("unreads", &s.to_string())]);
        }
        if let Some(ref s) = inclusive {
            req_builder = req_builder.query(&[("inclusive", &s.to_string())]);
        }
        if let Some(ref s) = token {
            req_builder = req_builder.query(&[("token", &s.to_string())]);
        }
        if let Some(ref s) = oldest {
            req_builder = req_builder.query(&[("oldest", &s.to_string())]);
        }
        if let Some(ref s) = channel {
            req_builder = req_builder.query(&[("channel", &s.to_string())]);
        }
        if let Some(ref s) = latest {
            req_builder = req_builder.query(&[("latest", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<HistoryError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn info(configuration: &configuration::Configuration, params: InfoParams) -> Result<crate::models::ChannelsInfoSuccessSchema, Error<InfoError>> {
        // unbox the parameters
        let token = params.token;
        let include_locale = params.include_locale;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/channels.info", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = token {
            req_builder = req_builder.query(&[("token", &s.to_string())]);
        }
        if let Some(ref s) = include_locale {
            req_builder = req_builder.query(&[("include_locale", &s.to_string())]);
        }
        if let Some(ref s) = channel {
            req_builder = req_builder.query(&[("channel", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<InfoError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn invite(configuration: &configuration::Configuration, params: InviteParams) -> Result<crate::models::ChannelsInviteErrorSchema, Error<InviteError>> {
        // unbox the parameters
        let token = params.token;
        let user = params.user;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/channels.invite", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(param_value) = token {
            req_builder = req_builder.header("token", param_value.to_string());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = user {
            form_params.insert("user", param_value.to_string());
        }
        if let Some(param_value) = channel {
            form_params.insert("channel", param_value.to_string());
        }
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<InviteError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn join(configuration: &configuration::Configuration, params: JoinParams) -> Result<crate::models::ChannelsJoinSchema, Error<JoinError>> {
        // unbox the parameters
        let token = params.token;
        let validate = params.validate;
        let name = params.name;

        let client = &configuration.client;

        let uri_str = format!("{}/channels.join", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(param_value) = token {
            req_builder = req_builder.header("token", param_value.to_string());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = validate {
            form_params.insert("validate", param_value.to_string());
        }
        if let Some(param_value) = name {
            form_params.insert("name", param_value.to_string());
        }
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<JoinError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn kick(configuration: &configuration::Configuration, params: KickParams) -> Result<crate::models::ChannelsKickSchema, Error<KickError>> {
        // unbox the parameters
        let token = params.token;
        let user = params.user;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/channels.kick", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(param_value) = token {
            req_builder = req_builder.header("token", param_value.to_string());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = user {
            form_params.insert("user", param_value.to_string());
        }
        if let Some(param_value) = channel {
            form_params.insert("channel", param_value.to_string());
        }
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<KickError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn leave(configuration: &configuration::Configuration, params: LeaveParams) -> Result<crate::models::ChannelsLeaveSchema, Error<LeaveError>> {
        // unbox the parameters
        let token = params.token;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/channels.leave", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(param_value) = token {
            req_builder = req_builder.header("token", param_value.to_string());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = channel {
            form_params.insert("channel", param_value.to_string());
        }
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<LeaveError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn list(configuration: &configuration::Configuration, params: ListParams) -> Result<crate::models::ChannelsListSuccessSchema, Error<ListError>> {
        // unbox the parameters
        let exclude_members = params.exclude_members;
        let cursor = params.cursor;
        let token = params.token;
        let limit = params.limit;
        let exclude_archived = params.exclude_archived;

        let client = &configuration.client;

        let uri_str = format!("{}/channels.list", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = exclude_members {
            req_builder = req_builder.query(&[("exclude_members", &s.to_string())]);
        }
        if let Some(ref s) = cursor {
            req_builder = req_builder.query(&[("cursor", &s.to_string())]);
        }
        if let Some(ref s) = token {
            req_builder = req_builder.query(&[("token", &s.to_string())]);
        }
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = exclude_archived {
            req_builder = req_builder.query(&[("exclude_archived", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ListError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn mark(configuration: &configuration::Configuration, params: MarkParams) -> Result<crate::models::ChannelsMarkSuccessSchema, Error<MarkError>> {
        // unbox the parameters
        let token = params.token;
        let ts = params.ts;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/channels.mark", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(param_value) = token {
            req_builder = req_builder.header("token", param_value.to_string());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = ts {
            form_params.insert("ts", param_value.to_string());
        }
        if let Some(param_value) = channel {
            form_params.insert("channel", param_value.to_string());
        }
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<MarkError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn rename(configuration: &configuration::Configuration, params: RenameParams) -> Result<crate::models::ChannelsRenameSchema, Error<RenameError>> {
        // unbox the parameters
        let token = params.token;
        let validate = params.validate;
        let name = params.name;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/channels.rename", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(param_value) = token {
            req_builder = req_builder.header("token", param_value.to_string());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = validate {
            form_params.insert("validate", param_value.to_string());
        }
        if let Some(param_value) = name {
            form_params.insert("name", param_value.to_string());
        }
        if let Some(param_value) = channel {
            form_params.insert("channel", param_value.to_string());
        }
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<RenameError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn replies(configuration: &configuration::Configuration, params: RepliesParams) -> Result<crate::models::ChannelsRepliesSchema, Error<RepliesError>> {
        // unbox the parameters
        let thread_ts = params.thread_ts;
        let token = params.token;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/channels.replies", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = thread_ts {
            req_builder = req_builder.query(&[("thread_ts", &s.to_string())]);
        }
        if let Some(ref s) = token {
            req_builder = req_builder.query(&[("token", &s.to_string())]);
        }
        if let Some(ref s) = channel {
            req_builder = req_builder.query(&[("channel", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<RepliesError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn set_purpose(configuration: &configuration::Configuration, params: SetPurposeParams) -> Result<crate::models::ChannelsSetPurposeSchema, Error<SetPurposeError>> {
        // unbox the parameters
        let token = params.token;
        let purpose = params.purpose;
        let channel = params.channel;
        let name_tagging = params.name_tagging;

        let client = &configuration.client;

        let uri_str = format!("{}/channels.setPurpose", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("token", token.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = name_tagging {
            form_params.insert("name_tagging", param_value.to_string());
        }
        form_params.insert("purpose", purpose.to_string());
        form_params.insert("channel", channel.to_string());
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<SetPurposeError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn set_topic(configuration: &configuration::Configuration, params: SetTopicParams) -> Result<crate::models::ChannelsSetTopicSchema, Error<SetTopicError>> {
        // unbox the parameters
        let token = params.token;
        let topic = params.topic;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/channels.setTopic", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("token", token.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        form_params.insert("topic", topic.to_string());
        form_params.insert("channel", channel.to_string());
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<SetTopicError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn unarchive(configuration: &configuration::Configuration, params: UnarchiveParams) -> Result<crate::models::ChannelsUnarchiveSchema, Error<UnarchiveError>> {
        // unbox the parameters
        let token = params.token;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/channels.unarchive", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("token", token.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        form_params.insert("channel", channel.to_string());
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<UnarchiveError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

