/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::rc::Rc;

use std::option::Option;

use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `add`
#[derive(Clone, Debug)]
pub struct AddParams {
    /// Authentication token. Requires scope: `reactions:write`
    pub token: String,
    /// Timestamp of the message to add reaction to.
    pub timestamp: String,
    /// Reaction (emoji) name.
    pub name: String,
    /// Channel where the message to add reaction to was posted.
    pub channel: String
}

/// struct for passing parameters to the method `get`
#[derive(Clone, Debug)]
pub struct GetParams {
    /// Authentication token. Requires scope: `reactions:read`
    pub token: String,
    /// If true always return the complete reaction list.
    pub full: Option<bool>,
    /// File comment to get reactions for.
    pub file_comment: Option<String>,
    /// Timestamp of the message to get reactions for.
    pub timestamp: Option<String>,
    /// File to get reactions for.
    pub file: Option<String>,
    /// Channel where the message to get reactions for was posted.
    pub channel: Option<String>
}

/// struct for passing parameters to the method `list`
#[derive(Clone, Debug)]
pub struct ListParams {
    /// Authentication token. Requires scope: `reactions:read`
    pub token: String,
    pub count: Option<i32>,
    /// If true always return the complete reaction list.
    pub full: Option<bool>,
    /// Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.
    pub cursor: Option<String>,
    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
    pub limit: Option<i32>,
    /// Show reactions made by this user. Defaults to the authed user.
    pub user: Option<String>,
    pub page: Option<i32>
}

/// struct for passing parameters to the method `remove`
#[derive(Clone, Debug)]
pub struct RemoveParams {
    /// Authentication token. Requires scope: `reactions:write`
    pub token: String,
    /// Reaction (emoji) name.
    pub name: String,
    /// File comment to remove reaction from.
    pub file_comment: Option<String>,
    /// Timestamp of the message to remove reaction from.
    pub timestamp: Option<String>,
    /// File to remove reaction from.
    pub file: Option<String>,
    /// Channel where the message to remove reaction from was posted.
    pub channel: Option<String>
}


/// struct for typed errors of method `add`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddError {
    DefaultResponse(crate::models::ReactionsAddErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetError {
    DefaultResponse(crate::models::ReactionsGetErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListError {
    DefaultResponse(crate::models::ReactionsListErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `remove`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveError {
    DefaultResponse(crate::models::ReactionsRemoveErrorSchema),
    UnknownValue(serde_json::Value),
}


    pub async fn add(configuration: &configuration::Configuration, params: AddParams) -> Result<crate::models::ReactionsAddSchema, Error<AddError>> {
        // unbox the parameters
        let token = params.token;
        let timestamp = params.timestamp;
        let name = params.name;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/reactions.add", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("token", token.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        form_params.insert("timestamp", timestamp.to_string());
        form_params.insert("name", name.to_string());
        form_params.insert("channel", channel.to_string());
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<AddError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn get(configuration: &configuration::Configuration, params: GetParams) -> Result<serde_json::Value, Error<GetError>> {
        // unbox the parameters
        let token = params.token;
        let full = params.full;
        let file_comment = params.file_comment;
        let timestamp = params.timestamp;
        let file = params.file;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/reactions.get", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = full {
            req_builder = req_builder.query(&[("full", &s.to_string())]);
        }
        if let Some(ref s) = file_comment {
            req_builder = req_builder.query(&[("file_comment", &s.to_string())]);
        }
        if let Some(ref s) = timestamp {
            req_builder = req_builder.query(&[("timestamp", &s.to_string())]);
        }
        req_builder = req_builder.query(&[("token", &token.to_string())]);
        if let Some(ref s) = file {
            req_builder = req_builder.query(&[("file", &s.to_string())]);
        }
        if let Some(ref s) = channel {
            req_builder = req_builder.query(&[("channel", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<GetError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn list(configuration: &configuration::Configuration, params: ListParams) -> Result<crate::models::ReactionsListSchema, Error<ListError>> {
        // unbox the parameters
        let token = params.token;
        let count = params.count;
        let full = params.full;
        let cursor = params.cursor;
        let limit = params.limit;
        let user = params.user;
        let page = params.page;

        let client = &configuration.client;

        let uri_str = format!("{}/reactions.list", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = count {
            req_builder = req_builder.query(&[("count", &s.to_string())]);
        }
        if let Some(ref s) = full {
            req_builder = req_builder.query(&[("full", &s.to_string())]);
        }
        if let Some(ref s) = cursor {
            req_builder = req_builder.query(&[("cursor", &s.to_string())]);
        }
        req_builder = req_builder.query(&[("token", &token.to_string())]);
        if let Some(ref s) = limit {
            req_builder = req_builder.query(&[("limit", &s.to_string())]);
        }
        if let Some(ref s) = user {
            req_builder = req_builder.query(&[("user", &s.to_string())]);
        }
        if let Some(ref s) = page {
            req_builder = req_builder.query(&[("page", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ListError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn remove(configuration: &configuration::Configuration, params: RemoveParams) -> Result<crate::models::ReactionsRemoveSchema, Error<RemoveError>> {
        // unbox the parameters
        let token = params.token;
        let name = params.name;
        let file_comment = params.file_comment;
        let timestamp = params.timestamp;
        let file = params.file;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/reactions.remove", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("token", token.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        form_params.insert("name", name.to_string());
        if let Some(param_value) = file_comment {
            form_params.insert("file_comment", param_value.to_string());
        }
        if let Some(param_value) = timestamp {
            form_params.insert("timestamp", param_value.to_string());
        }
        if let Some(param_value) = file {
            form_params.insert("file", param_value.to_string());
        }
        if let Some(param_value) = channel {
            form_params.insert("channel", param_value.to_string());
        }
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<RemoveError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

