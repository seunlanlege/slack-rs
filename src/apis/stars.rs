/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `add`
#[derive(Clone, Debug)]
pub struct AddParams {
    /// Authentication token. Requires scope: `stars:write`
    pub token: String,
    /// File comment to add star to.
    pub file_comment: Option<String>,
    /// Timestamp of the message to add star to.
    pub timestamp: Option<String>,
    /// File to add star to.
    pub file: Option<String>,
    /// Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`).
    pub channel: Option<String>
}

/// struct for passing parameters to the method `list`
#[derive(Clone, Debug)]
pub struct ListParams {
    pub count: Option<String>,
    /// Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.
    pub cursor: Option<String>,
    /// Authentication token. Requires scope: `stars:read`
    pub token: Option<String>,
    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
    pub limit: Option<i32>,
    pub page: Option<String>
}

/// struct for passing parameters to the method `remove`
#[derive(Clone, Debug)]
pub struct RemoveParams {
    /// File comment to remove star from.
    pub file_comment: Option<String>,
    /// Timestamp of the message to remove star from.
    pub timestamp: Option<f32>,
    /// Authentication token. Requires scope: `stars:write`
    pub token: Option<String>,
    /// Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`).
    pub channel: Option<String>,
    /// File to remove star from.
    pub file: Option<String>
}


/// struct for typed errors of method `add`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddError {
    DefaultResponse(crate::models::StarsAddErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListError {
    DefaultResponse(crate::models::StarsListErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `remove`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveError {
    DefaultResponse(crate::models::StarsRemoveErrorSchema),
    UnknownValue(serde_json::Value),
}


/// Adds a star to an item.
pub async fn add(configuration: &configuration::Configuration, params: AddParams) -> Result<crate::models::StarsAddSchema, Error<AddError>> {
    // unbox the parameters
    let token = params.token;
    let file_comment = params.file_comment;
    let timestamp = params.timestamp;
    let file = params.file;
    let channel = params.channel;


    let client = &configuration.client;

    let uri_str = format!("{}/stars.add", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    if let Some(param_value) = file_comment {
        form_params.insert("file_comment", param_value.to_string());
    }
    if let Some(param_value) = timestamp {
        form_params.insert("timestamp", param_value.to_string());
    }
    form_params.insert("token", token.to_string());
    if let Some(param_value) = file {
        form_params.insert("file", param_value.to_string());
    }
    if let Some(param_value) = channel {
        form_params.insert("channel", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::StarsAddSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<AddError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Lists stars for a user.
pub async fn list(configuration: &configuration::Configuration, params: ListParams) -> Result<crate::models::StarsListSchema, Error<ListError>> {
    // unbox the parameters
    let count = params.count;
    let cursor = params.cursor;
    let token = params.token;
    let limit = params.limit;
    let page = params.page;


    let client = &configuration.client;

    let uri_str = format!("{}/stars.list", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = count {
        req_builder = req_builder.query(&[("count", &s.to_string())]);
    }
    if let Some(ref s) = cursor {
        req_builder = req_builder.query(&[("cursor", &s.to_string())]);
    }
    if let Some(ref s) = token {
        req_builder = req_builder.query(&[("token", &s.to_string())]);
    }
    if let Some(ref s) = limit {
        req_builder = req_builder.query(&[("limit", &s.to_string())]);
    }
    if let Some(ref s) = page {
        req_builder = req_builder.query(&[("page", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::StarsListSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<ListError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Removes a star from an item.
pub async fn remove(configuration: &configuration::Configuration, params: RemoveParams) -> Result<crate::models::StarsRemoveSchema, Error<RemoveError>> {
    // unbox the parameters
    let file_comment = params.file_comment;
    let timestamp = params.timestamp;
    let token = params.token;
    let channel = params.channel;
    let file = params.file;


    let client = &configuration.client;

    let uri_str = format!("{}/stars.remove", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    if let Some(param_value) = file_comment {
        form_params.insert("file_comment", param_value.to_string());
    }
    if let Some(param_value) = timestamp {
        form_params.insert("timestamp", param_value.to_string());
    }
    if let Some(param_value) = token {
        form_params.insert("token", param_value.to_string());
    }
    if let Some(param_value) = channel {
        form_params.insert("channel", param_value.to_string());
    }
    if let Some(param_value) = file {
        form_params.insert("file", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::StarsRemoveSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<RemoveError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

