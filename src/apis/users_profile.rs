/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `profile_get`
#[derive(Clone, Debug)]
pub struct ProfileGetParams {
    /// Authentication token. Requires scope: `users.profile:read`
    pub token: Option<String>,
    /// Include labels for each ID in custom profile fields
    pub include_labels: Option<bool>,
    /// User to retrieve profile info for
    pub user: Option<String>
}

/// struct for passing parameters to the method `profile_set`
#[derive(Clone, Debug)]
pub struct ProfileSetParams {
    /// Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters.
    pub profile: Option<String>,
    /// Authentication token. Requires scope: `users.profile:write`
    pub token: Option<String>,
    /// ID of user to change. This argument may only be specified by team admins on paid teams.
    pub user: Option<String>,
    /// Value to set a single key to. Usable only if `profile` is not passed.
    pub value: Option<String>,
    /// Name of a single key to set. Usable only if `profile` is not passed.
    pub name: Option<String>
}


/// struct for typed errors of method `profile_get`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProfileGetError {
    DefaultResponse(crate::models::UsersProfileGetErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `profile_set`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProfileSetError {
    DefaultResponse(crate::models::UsersProfileSetErrorSchema),
    UnknownValue(serde_json::Value),
}


/// Retrieves a user's profile information.
pub async fn profile_get(configuration: &configuration::Configuration, params: ProfileGetParams) -> Result<crate::models::UsersProfileGetSchema, Error<ProfileGetError>> {
    // unbox the parameters
    let token = params.token;
    let include_labels = params.include_labels;
    let user = params.user;


    let client = &configuration.client;

    let uri_str = format!("{}/users.profile.get", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = token {
        req_builder = req_builder.query(&[("token", &s.to_string())]);
    }
    if let Some(ref s) = include_labels {
        req_builder = req_builder.query(&[("include_labels", &s.to_string())]);
    }
    if let Some(ref s) = user {
        req_builder = req_builder.query(&[("user", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::UsersProfileGetSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<ProfileGetError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Set the profile information for a user.
pub async fn profile_set(configuration: &configuration::Configuration, params: ProfileSetParams) -> Result<crate::models::UsersProfileSetSchema, Error<ProfileSetError>> {
    // unbox the parameters
    let profile = params.profile;
    let token = params.token;
    let user = params.user;
    let value = params.value;
    let name = params.name;


    let client = &configuration.client;

    let uri_str = format!("{}/users.profile.set", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    if let Some(param_value) = profile {
        form_params.insert("profile", param_value.to_string());
    }
    if let Some(param_value) = token {
        form_params.insert("token", param_value.to_string());
    }
    if let Some(param_value) = user {
        form_params.insert("user", param_value.to_string());
    }
    if let Some(param_value) = value {
        form_params.insert("value", param_value.to_string());
    }
    if let Some(param_value) = name {
        form_params.insert("name", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::UsersProfileSetSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<ProfileSetError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

