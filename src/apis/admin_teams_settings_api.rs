/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::rc::Rc;

use std::option::Option;

use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `teams_settings_info`
#[derive(Clone, Debug)]
pub struct TeamsSettingsInfoParams {
    /// Authentication token. Requires scope: `admin.teams:read`
    pub token: String,
    pub team_id: String
}

/// struct for passing parameters to the method `teams_settings_set_default_channels`
#[derive(Clone, Debug)]
pub struct TeamsSettingsSetDefaultChannelsParams {
    /// An array of channel IDs.
    pub channel_ids: String,
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// ID for the workspace to set the default channel for.
    pub team_id: String
}

/// struct for passing parameters to the method `teams_settings_set_description`
#[derive(Clone, Debug)]
pub struct TeamsSettingsSetDescriptionParams {
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// ID for the workspace to set the description for.
    pub team_id: String,
    /// The new description for the workspace.
    pub description: String
}

/// struct for passing parameters to the method `teams_settings_set_discoverability`
#[derive(Clone, Debug)]
pub struct TeamsSettingsSetDiscoverabilityParams {
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// The ID of the workspace to set discoverability on.
    pub team_id: String,
    /// This workspace's discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`.
    pub discoverability: String
}

/// struct for passing parameters to the method `teams_settings_set_icon`
#[derive(Clone, Debug)]
pub struct TeamsSettingsSetIconParams {
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// Image URL for the icon
    pub image_url: String,
    /// ID for the workspace to set the icon for.
    pub team_id: String
}

/// struct for passing parameters to the method `teams_settings_set_name`
#[derive(Clone, Debug)]
pub struct TeamsSettingsSetNameParams {
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// ID for the workspace to set the name for.
    pub team_id: String,
    /// The new name of the workspace.
    pub name: String
}


/// struct for typed errors of method `teams_settings_info`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TeamsSettingsInfoError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `teams_settings_set_default_channels`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TeamsSettingsSetDefaultChannelsError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `teams_settings_set_description`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TeamsSettingsSetDescriptionError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `teams_settings_set_discoverability`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TeamsSettingsSetDiscoverabilityError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `teams_settings_set_icon`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TeamsSettingsSetIconError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `teams_settings_set_name`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TeamsSettingsSetNameError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}


    pub async fn teams_settings_info(configuration: &configuration::Configuration, params: TeamsSettingsInfoParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<TeamsSettingsInfoError>> {
        // unbox the parameters
        let token = params.token;
        let team_id = params.team_id;

        let client = &configuration.client;

        let uri_str = format!("{}/admin.teams.settings.info", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("team_id", &team_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("token", token.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<TeamsSettingsInfoError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn teams_settings_set_default_channels(configuration: &configuration::Configuration, params: TeamsSettingsSetDefaultChannelsParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<TeamsSettingsSetDefaultChannelsError>> {
        // unbox the parameters
        let channel_ids = params.channel_ids;
        let token = params.token;
        let team_id = params.team_id;

        let client = &configuration.client;

        let uri_str = format!("{}/admin.teams.settings.setDefaultChannels", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        form_params.insert("channel_ids", channel_ids.to_string());
        form_params.insert("token", token.to_string());
        form_params.insert("team_id", team_id.to_string());
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<TeamsSettingsSetDefaultChannelsError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn teams_settings_set_description(configuration: &configuration::Configuration, params: TeamsSettingsSetDescriptionParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<TeamsSettingsSetDescriptionError>> {
        // unbox the parameters
        let token = params.token;
        let team_id = params.team_id;
        let description = params.description;

        let client = &configuration.client;

        let uri_str = format!("{}/admin.teams.settings.setDescription", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("token", token.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        form_params.insert("team_id", team_id.to_string());
        form_params.insert("description", description.to_string());
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<TeamsSettingsSetDescriptionError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn teams_settings_set_discoverability(configuration: &configuration::Configuration, params: TeamsSettingsSetDiscoverabilityParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<TeamsSettingsSetDiscoverabilityError>> {
        // unbox the parameters
        let token = params.token;
        let team_id = params.team_id;
        let discoverability = params.discoverability;

        let client = &configuration.client;

        let uri_str = format!("{}/admin.teams.settings.setDiscoverability", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("token", token.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        form_params.insert("team_id", team_id.to_string());
        form_params.insert("discoverability", discoverability.to_string());
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<TeamsSettingsSetDiscoverabilityError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn teams_settings_set_icon(configuration: &configuration::Configuration, params: TeamsSettingsSetIconParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<TeamsSettingsSetIconError>> {
        // unbox the parameters
        let token = params.token;
        let image_url = params.image_url;
        let team_id = params.team_id;

        let client = &configuration.client;

        let uri_str = format!("{}/admin.teams.settings.setIcon", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        form_params.insert("token", token.to_string());
        form_params.insert("image_url", image_url.to_string());
        form_params.insert("team_id", team_id.to_string());
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<TeamsSettingsSetIconError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn teams_settings_set_name(configuration: &configuration::Configuration, params: TeamsSettingsSetNameParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<TeamsSettingsSetNameError>> {
        // unbox the parameters
        let token = params.token;
        let team_id = params.team_id;
        let name = params.name;

        let client = &configuration.client;

        let uri_str = format!("{}/admin.teams.settings.setName", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("token", token.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        form_params.insert("team_id", team_id.to_string());
        form_params.insert("name", name.to_string());
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<TeamsSettingsSetNameError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

