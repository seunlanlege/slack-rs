/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `access`
#[derive(Clone, Debug)]
pub struct AccessParams {
    /// The `code` param returned via the OAuth callback.
    pub code: Option<String>,
    /// Authentication token. Requires scope: `none`
    pub token: Option<String>,
    /// This must match the originally submitted URI (if one was sent).
    pub redirect_uri: Option<String>,
    /// Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps).
    pub single_channel: Option<bool>,
    /// Issued when you created your application.
    pub client_id: Option<String>,
    /// Issued when you created your application.
    pub client_secret: Option<String>
}

/// struct for passing parameters to the method `token`
#[derive(Clone, Debug)]
pub struct TokenParams {
    /// Issued when you created your application.
    pub client_secret: Option<String>,
    /// The `code` param returned via the OAuth callback.
    pub code: Option<String>,
    /// Request the user to add your app only to a single channel.
    pub single_channel: Option<bool>,
    /// Issued when you created your application.
    pub client_id: Option<String>,
    /// This must match the originally submitted URI (if one was sent).
    pub redirect_uri: Option<String>
}

/// struct for passing parameters to the method `v2_access`
#[derive(Clone, Debug)]
pub struct V2AccessParams {
    /// The `code` param returned via the OAuth callback.
    pub code: String,
    /// Issued when you created your application.
    pub client_secret: Option<String>,
    /// Issued when you created your application.
    pub client_id: Option<String>,
    /// This must match the originally submitted URI (if one was sent).
    pub redirect_uri: Option<String>
}


/// struct for typed errors of method `access`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccessError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `token`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TokenError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `v2_access`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V2AccessError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}


/// Exchanges a temporary OAuth verifier code for an access token.
pub async fn access(configuration: &configuration::Configuration, params: AccessParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<AccessError>> {
    // unbox the parameters
    let code = params.code;
    let token = params.token;
    let redirect_uri = params.redirect_uri;
    let single_channel = params.single_channel;
    let client_id = params.client_id;
    let client_secret = params.client_secret;


    let client = &configuration.client;

    let uri_str = format!("{}/oauth.access", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = code {
        req_builder = req_builder.query(&[("code", &s.to_string())]);
    }
    if let Some(ref s) = token {
        req_builder = req_builder.query(&[("token", &s.to_string())]);
    }
    if let Some(ref s) = redirect_uri {
        req_builder = req_builder.query(&[("redirect_uri", &s.to_string())]);
    }
    if let Some(ref s) = single_channel {
        req_builder = req_builder.query(&[("single_channel", &s.to_string())]);
    }
    if let Some(ref s) = client_id {
        req_builder = req_builder.query(&[("client_id", &s.to_string())]);
    }
    if let Some(ref s) = client_secret {
        req_builder = req_builder.query(&[("client_secret", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<AccessError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Exchanges a temporary OAuth verifier code for a workspace token.
pub async fn token(configuration: &configuration::Configuration, params: TokenParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<TokenError>> {
    // unbox the parameters
    let client_secret = params.client_secret;
    let code = params.code;
    let single_channel = params.single_channel;
    let client_id = params.client_id;
    let redirect_uri = params.redirect_uri;


    let client = &configuration.client;

    let uri_str = format!("{}/oauth.token", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = client_secret {
        req_builder = req_builder.query(&[("client_secret", &s.to_string())]);
    }
    if let Some(ref s) = code {
        req_builder = req_builder.query(&[("code", &s.to_string())]);
    }
    if let Some(ref s) = single_channel {
        req_builder = req_builder.query(&[("single_channel", &s.to_string())]);
    }
    if let Some(ref s) = client_id {
        req_builder = req_builder.query(&[("client_id", &s.to_string())]);
    }
    if let Some(ref s) = redirect_uri {
        req_builder = req_builder.query(&[("redirect_uri", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<TokenError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Exchanges a temporary OAuth verifier code for an access token.
pub async fn v2_access(configuration: &configuration::Configuration, params: V2AccessParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<V2AccessError>> {
    // unbox the parameters
    let code = params.code;
    let client_secret = params.client_secret;
    let client_id = params.client_id;
    let redirect_uri = params.redirect_uri;


    let client = &configuration.client;

    let uri_str = format!("{}/oauth.v2.access", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = client_secret {
        req_builder = req_builder.query(&[("client_secret", &s.to_string())]);
    }
    req_builder = req_builder.query(&[("code", &code.to_string())]);
    if let Some(ref s) = client_id {
        req_builder = req_builder.query(&[("client_id", &s.to_string())]);
    }
    if let Some(ref s) = redirect_uri {
        req_builder = req_builder.query(&[("redirect_uri", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<V2AccessError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

