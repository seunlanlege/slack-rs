/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::rc::Rc;

use std::option::Option;

use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `add`
#[derive(Clone, Debug)]
pub struct AddParams {
    /// Authentication token. Requires scope: `reminders:write`
    pub token: Option<String>,
    /// The content of the reminder
    pub text: Option<String>,
    /// The user who will receive the reminder. If no user is specified, the reminder will go to user who created it.
    pub user: Option<String>,
    /// When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \\\"in 15 minutes,\\\" or \\\"every Thursday\\\")
    pub time: Option<String>
}

/// struct for passing parameters to the method `complete`
#[derive(Clone, Debug)]
pub struct CompleteParams {
    /// Authentication token. Requires scope: `reminders:write`
    pub token: Option<String>,
    /// The ID of the reminder to be marked as complete
    pub reminder: Option<String>
}

/// struct for passing parameters to the method `delete`
#[derive(Clone, Debug)]
pub struct DeleteParams {
    /// Authentication token. Requires scope: `reminders:write`
    pub token: Option<String>,
    /// The ID of the reminder
    pub reminder: Option<String>
}

/// struct for passing parameters to the method `info`
#[derive(Clone, Debug)]
pub struct InfoParams {
    /// Authentication token. Requires scope: `reminders:read`
    pub token: Option<String>,
    /// The ID of the reminder
    pub reminder: Option<String>
}

/// struct for passing parameters to the method `list`
#[derive(Clone, Debug)]
pub struct ListParams {
    /// Authentication token. Requires scope: `reminders:read`
    pub token: Option<String>
}


/// struct for typed errors of method `add`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddError {
    DefaultResponse(crate::models::RemindersAddErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `complete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CompleteError {
    DefaultResponse(crate::models::RemindersCompleteErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteError {
    DefaultResponse(crate::models::RemindersDeleteErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `info`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InfoError {
    DefaultResponse(crate::models::RemindersInfoErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListError {
    DefaultResponse(crate::models::RemindersListErrorSchema),
    UnknownValue(serde_json::Value),
}


    pub async fn add(configuration: &configuration::Configuration, params: AddParams) -> Result<crate::models::RemindersAddSchema, Error<AddError>> {
        // unbox the parameters
        let token = params.token;
        let text = params.text;
        let user = params.user;
        let time = params.time;

        let client = &configuration.client;

        let uri_str = format!("{}/reminders.add", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(param_value) = token {
            req_builder = req_builder.header("token", param_value.to_string());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = text {
            form_params.insert("text", param_value.to_string());
        }
        if let Some(param_value) = user {
            form_params.insert("user", param_value.to_string());
        }
        if let Some(param_value) = time {
            form_params.insert("time", param_value.to_string());
        }
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<AddError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn complete(configuration: &configuration::Configuration, params: CompleteParams) -> Result<crate::models::RemindersCompleteSchema, Error<CompleteError>> {
        // unbox the parameters
        let token = params.token;
        let reminder = params.reminder;

        let client = &configuration.client;

        let uri_str = format!("{}/reminders.complete", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(param_value) = token {
            req_builder = req_builder.header("token", param_value.to_string());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = reminder {
            form_params.insert("reminder", param_value.to_string());
        }
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<CompleteError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn delete(configuration: &configuration::Configuration, params: DeleteParams) -> Result<crate::models::RemindersDeleteSchema, Error<DeleteError>> {
        // unbox the parameters
        let token = params.token;
        let reminder = params.reminder;

        let client = &configuration.client;

        let uri_str = format!("{}/reminders.delete", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(param_value) = token {
            req_builder = req_builder.header("token", param_value.to_string());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = reminder {
            form_params.insert("reminder", param_value.to_string());
        }
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<DeleteError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn info(configuration: &configuration::Configuration, params: InfoParams) -> Result<crate::models::RemindersInfoSchema, Error<InfoError>> {
        // unbox the parameters
        let token = params.token;
        let reminder = params.reminder;

        let client = &configuration.client;

        let uri_str = format!("{}/reminders.info", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = token {
            req_builder = req_builder.query(&[("token", &s.to_string())]);
        }
        if let Some(ref s) = reminder {
            req_builder = req_builder.query(&[("reminder", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<InfoError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn list(configuration: &configuration::Configuration, params: ListParams) -> Result<crate::models::RemindersListSchema, Error<ListError>> {
        // unbox the parameters
        let token = params.token;

        let client = &configuration.client;

        let uri_str = format!("{}/reminders.list", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = token {
            req_builder = req_builder.query(&[("token", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ListError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

