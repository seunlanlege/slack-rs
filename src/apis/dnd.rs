/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `end_dnd`
#[derive(Clone, Debug)]
pub struct EndDndParams {
    /// Authentication token. Requires scope: `dnd:write`
    pub token: String
}

/// struct for passing parameters to the method `end_snooze`
#[derive(Clone, Debug)]
pub struct EndSnoozeParams {
    /// Authentication token. Requires scope: `dnd:write`
    pub token: String
}

/// struct for passing parameters to the method `info`
#[derive(Clone, Debug)]
pub struct InfoParams {
    /// Authentication token. Requires scope: `dnd:read`
    pub token: Option<String>,
    /// User to fetch status for (defaults to current user)
    pub user: Option<String>
}

/// struct for passing parameters to the method `set_snooze`
#[derive(Clone, Debug)]
pub struct SetSnoozeParams {
    /// Number of minutes, from now, to snooze until.
    pub num_minutes: String,
    /// Authentication token. Requires scope: `dnd:write`
    pub token: String
}

/// struct for passing parameters to the method `team_info`
#[derive(Clone, Debug)]
pub struct TeamInfoParams {
    /// Authentication token. Requires scope: `dnd:read`
    pub token: Option<String>,
    /// Comma-separated list of users to fetch Do Not Disturb status for
    pub users: Option<String>
}


/// struct for typed errors of method `end_dnd`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EndDndError {
    DefaultResponse(crate::models::DndEndDndErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `end_snooze`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EndSnoozeError {
    DefaultResponse(crate::models::DndEndSnoozeErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `info`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InfoError {
    DefaultResponse(crate::models::DndInfoErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_snooze`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetSnoozeError {
    DefaultResponse(crate::models::DndSetSnoozeErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `team_info`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TeamInfoError {
    DefaultResponse(crate::models::DndTeamInfoErrorSchema),
    UnknownValue(serde_json::Value),
}


/// Ends the current user's Do Not Disturb session immediately.
pub async fn end_dnd(configuration: &configuration::Configuration, params: EndDndParams) -> Result<crate::models::DndEndDndSchema, Error<EndDndError>> {
    // unbox the parameters
    let token = params.token;


    let client = &configuration.client;

    let uri_str = format!("{}/dnd.endDnd", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("token", token.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::DndEndDndSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<EndDndError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Ends the current user's snooze mode immediately.
pub async fn end_snooze(configuration: &configuration::Configuration, params: EndSnoozeParams) -> Result<crate::models::DndEndSnoozeSchema, Error<EndSnoozeError>> {
    // unbox the parameters
    let token = params.token;


    let client = &configuration.client;

    let uri_str = format!("{}/dnd.endSnooze", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("token", token.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::DndEndSnoozeSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<EndSnoozeError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Retrieves a user's current Do Not Disturb status.
pub async fn info(configuration: &configuration::Configuration, params: InfoParams) -> Result<crate::models::DndInfoSchema, Error<InfoError>> {
    // unbox the parameters
    let token = params.token;
    let user = params.user;


    let client = &configuration.client;

    let uri_str = format!("{}/dnd.info", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = token {
        req_builder = req_builder.query(&[("token", &s.to_string())]);
    }
    if let Some(ref s) = user {
        req_builder = req_builder.query(&[("user", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::DndInfoSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<InfoError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Turns on Do Not Disturb mode for the current user, or changes its duration.
pub async fn set_snooze(configuration: &configuration::Configuration, params: SetSnoozeParams) -> Result<crate::models::DndSetSnoozeSchema, Error<SetSnoozeError>> {
    // unbox the parameters
    let num_minutes = params.num_minutes;
    let token = params.token;


    let client = &configuration.client;

    let uri_str = format!("{}/dnd.setSnooze", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("num_minutes", num_minutes.to_string());
    form_params.insert("token", token.to_string());
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::DndSetSnoozeSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<SetSnoozeError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

/// Retrieves the Do Not Disturb status for up to 50 users on a team.
pub async fn team_info(configuration: &configuration::Configuration, params: TeamInfoParams) -> Result<crate::models::DndTeamInfoSuccessSchema, Error<TeamInfoError>> {
    // unbox the parameters
    let token = params.token;
    let users = params.users;


    let client = &configuration.client;

    let uri_str = format!("{}/dnd.teamInfo", configuration.base_path);
    let mut req_builder = client.get(uri_str.as_str());

    if let Some(ref s) = token {
        req_builder = req_builder.query(&[("token", &s.to_string())]);
    }
    if let Some(ref s) = users {
        req_builder = req_builder.query(&[("users", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<crate::models::DndTeamInfoSuccessSchema> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<TeamInfoError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

