/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::rc::Rc;

use std::option::Option;

use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `add`
#[derive(Clone, Debug)]
pub struct AddParams {
    /// Authentication token. Requires scope: `pins:write`
    pub token: Option<String>,
    /// Timestamp of the message to pin.
    pub timestamp: Option<f32>,
    /// Channel to pin the item in.
    pub channel: Option<String>
}

/// struct for passing parameters to the method `list`
#[derive(Clone, Debug)]
pub struct ListParams {
    /// Authentication token. Requires scope: `pins:read`
    pub token: Option<String>,
    /// Channel to get pinned items for.
    pub channel: Option<String>
}

/// struct for passing parameters to the method `remove`
#[derive(Clone, Debug)]
pub struct RemoveParams {
    /// Authentication token. Requires scope: `pins:write`
    pub token: Option<String>,
    /// File comment to un-pin.
    pub file_comment: Option<String>,
    /// Timestamp of the message to un-pin.
    pub timestamp: Option<f32>,
    /// File to un-pin.
    pub file: Option<String>,
    /// Channel where the item is pinned to.
    pub channel: Option<String>
}


/// struct for typed errors of method `add`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddError {
    DefaultResponse(crate::models::PinsAddErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListError {
    DefaultResponse(crate::models::PinsListErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `remove`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveError {
    DefaultResponse(crate::models::PinsRemoveErrorSchema),
    UnknownValue(serde_json::Value),
}


    pub async fn add(configuration: &configuration::Configuration, params: AddParams) -> Result<crate::models::PinsAddSchema, Error<AddError>> {
        // unbox the parameters
        let token = params.token;
        let timestamp = params.timestamp;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/pins.add", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(param_value) = token {
            req_builder = req_builder.header("token", param_value.to_string());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = timestamp {
            form_params.insert("timestamp", param_value.to_string());
        }
        if let Some(param_value) = channel {
            form_params.insert("channel", param_value.to_string());
        }
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<AddError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn list(configuration: &configuration::Configuration, params: ListParams) -> Result<serde_json::Value, Error<ListError>> {
        // unbox the parameters
        let token = params.token;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/pins.list", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = token {
            req_builder = req_builder.query(&[("token", &s.to_string())]);
        }
        if let Some(ref s) = channel {
            req_builder = req_builder.query(&[("channel", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ListError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn remove(configuration: &configuration::Configuration, params: RemoveParams) -> Result<crate::models::PinsRemoveSchema, Error<RemoveError>> {
        // unbox the parameters
        let token = params.token;
        let file_comment = params.file_comment;
        let timestamp = params.timestamp;
        let file = params.file;
        let channel = params.channel;

        let client = &configuration.client;

        let uri_str = format!("{}/pins.remove", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(param_value) = token {
            req_builder = req_builder.header("token", param_value.to_string());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        let mut form_params = std::collections::HashMap::new();
        if let Some(param_value) = file_comment {
            form_params.insert("file_comment", param_value.to_string());
        }
        if let Some(param_value) = timestamp {
            form_params.insert("timestamp", param_value.to_string());
        }
        if let Some(param_value) = file {
            form_params.insert("file", param_value.to_string());
        }
        if let Some(param_value) = channel {
            form_params.insert("channel", param_value.to_string());
        }
        req_builder = req_builder.form(&form_params);

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<RemoveError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

