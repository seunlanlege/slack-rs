/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `conversations_set_teams`
#[derive(Clone, Debug)]
pub struct ConversationsSetTeamsParams {
    /// The encoded `channel_id` to add or remove to workspaces.
    pub channel_id: String,
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// True if channel has to be converted to an org channel
    pub org_channel: Option<bool>,
    /// The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel.
    pub team_id: Option<String>,
    /// The list of workspaces to which the channel should be shared. Not required if the channel is being shared orgwide. Example: `['T1234', 'T5678']`
    pub target_team_ids: Option<String>
}


/// struct for typed errors of method `conversations_set_teams`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ConversationsSetTeamsError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}


/// Set the workspaces in an Enterprise grid org that connect to a channel.
pub async fn conversations_set_teams(configuration: &configuration::Configuration, params: ConversationsSetTeamsParams) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<ConversationsSetTeamsError>> {
    // unbox the parameters
    let channel_id = params.channel_id;
    let token = params.token;
    let org_channel = params.org_channel;
    let team_id = params.team_id;
    let target_team_ids = params.target_team_ids;


    let client = &configuration.client;

    let uri_str = format!("{}/admin.conversations.setTeams", configuration.base_path);
    let mut req_builder = client.post(uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut form_params = std::collections::HashMap::new();
    form_params.insert("channel_id", channel_id.to_string());
    form_params.insert("token", token.to_string());
    if let Some(param_value) = org_channel {
        form_params.insert("org_channel", param_value.to_string());
    }
    if let Some(param_value) = team_id {
        form_params.insert("team_id", param_value.to_string());
    }
    if let Some(param_value) = target_team_ids {
        form_params.insert("target_team_ids", param_value.to_string());
    }
    req_builder = req_builder.form(&form_params);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    let data: Option<::std::collections::HashMap<String, serde_json::Value>> = serde_json::from_str(&content).ok();

    if data.is_some() {
		Ok(data.unwrap())
    } else {
        let entity: Option<ConversationsSetTeamsError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

