/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ObjsTeam {
    #[serde(rename = "archived", skip_serializing_if = "Option::is_none")]
    pub archived: Option<bool>,
    #[serde(rename = "avatar_base_url", skip_serializing_if = "Option::is_none")]
    pub avatar_base_url: Option<String>,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<i32>,
    #[serde(rename = "date_create", skip_serializing_if = "Option::is_none")]
    pub date_create: Option<i32>,
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "discoverable", skip_serializing_if = "Option::is_none")]
    pub discoverable: Option<String>,
    #[serde(rename = "domain")]
    pub domain: String,
    #[serde(rename = "email_domain")]
    pub email_domain: String,
    #[serde(rename = "enterprise_id", skip_serializing_if = "Option::is_none")]
    pub enterprise_id: Option<String>,
    #[serde(rename = "enterprise_name", skip_serializing_if = "Option::is_none")]
    pub enterprise_name: Option<String>,
    #[serde(rename = "has_compliance_export", skip_serializing_if = "Option::is_none")]
    pub has_compliance_export: Option<bool>,
    #[serde(rename = "icon")]
    pub icon: crate::models::ObjsIcon,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "is_assigned", skip_serializing_if = "Option::is_none")]
    pub is_assigned: Option<bool>,
    #[serde(rename = "is_enterprise", skip_serializing_if = "Option::is_none")]
    pub is_enterprise: Option<i32>,
    #[serde(rename = "limit_ts", skip_serializing_if = "Option::is_none")]
    pub limit_ts: Option<i32>,
    #[serde(rename = "messages_count", skip_serializing_if = "Option::is_none")]
    pub messages_count: Option<i32>,
    #[serde(rename = "msg_edit_window_mins", skip_serializing_if = "Option::is_none")]
    pub msg_edit_window_mins: Option<i32>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "over_integrations_limit", skip_serializing_if = "Option::is_none")]
    pub over_integrations_limit: Option<bool>,
    #[serde(rename = "over_storage_limit", skip_serializing_if = "Option::is_none")]
    pub over_storage_limit: Option<bool>,
    #[serde(rename = "plan", skip_serializing_if = "Option::is_none")]
    pub plan: Option<Plan>,
}

impl ObjsTeam {
    pub fn new(domain: String, email_domain: String, icon: crate::models::ObjsIcon, id: String, name: String) -> ObjsTeam {
        ObjsTeam {
            archived: None,
            avatar_base_url: None,
            created: None,
            date_create: None,
            deleted: None,
            description: None,
            discoverable: None,
            domain,
            email_domain,
            enterprise_id: None,
            enterprise_name: None,
            has_compliance_export: None,
            icon,
            id,
            is_assigned: None,
            is_enterprise: None,
            limit_ts: None,
            messages_count: None,
            msg_edit_window_mins: None,
            name,
            over_integrations_limit: None,
            over_storage_limit: None,
            plan: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Plan {
    #[serde(rename = "")]
    Empty,
    #[serde(rename = "std")]
    Std,
    #[serde(rename = "plus")]
    Plus,
    #[serde(rename = "compliance")]
    Compliance,
    #[serde(rename = "enterprise")]
    Enterprise,
}

