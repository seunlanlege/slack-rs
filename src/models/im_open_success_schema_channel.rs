/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImOpenSuccessSchemaChannel {
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "is_im", skip_serializing_if = "Option::is_none")]
    pub is_im: Option<bool>,
    #[serde(rename = "is_open", skip_serializing_if = "Option::is_none")]
    pub is_open: Option<bool>,
    #[serde(rename = "last_read", skip_serializing_if = "Option::is_none")]
    pub last_read: Option<String>,
    #[serde(rename = "latest", skip_serializing_if = "Option::is_none")]
    pub latest: Option<crate::models::ObjsMessage>,
    #[serde(rename = "unread_count", skip_serializing_if = "Option::is_none")]
    pub unread_count: Option<f32>,
    #[serde(rename = "unread_count_display", skip_serializing_if = "Option::is_none")]
    pub unread_count_display: Option<f32>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

impl ImOpenSuccessSchemaChannel {
    pub fn new(id: String) -> ImOpenSuccessSchemaChannel {
        ImOpenSuccessSchemaChannel {
            created: None,
            id,
            is_im: None,
            is_open: None,
            last_read: None,
            latest: None,
            unread_count: None,
            unread_count_display: None,
            user: None,
        }
    }
}


